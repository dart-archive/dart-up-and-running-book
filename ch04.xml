<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="ch04">
  <title>工具</title>

  <para>Dart 提供了一些工具来帮助你编写和部署 web 应用和命令行
  应用：</para>

  <variablelist>
    <varlistentry>
      <term><link linkend="ch04-tools-pub">pub: Dart 包
      管理器</link></term>

      <listitem>
        <para>下载和安装包中的库。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link linkend="ch04-tools-editor">Dart 编辑器</link></term>

      <listitem>
        <para>编辑、运行、调试 web 和 命令行 应用。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link linkend="ch04-tools-dartium">Dartium: 带有 Dart
      VM 的 Chromium 浏览器</link></term>

      <listitem>
        <para>运行 Dart web 应用。用带有 Dart VM 的 Chromium 
        运行 web 应用。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link linkend="ch04-tools-dart2js">dart2js: Dart-to-JavaScript
      compiler</link></term>

      <listitem>
        <para>把你的 web 应用编译为 JavaScript 就可以在不包含 Dart VM
        的浏览器中运行了。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link linkend="ch04-tools-dart-vm">dart:独立的 Dart
      VM</link></term>

      <listitem>
        <para>运行命令行应用、服务器端脚本或者其他不能在
        浏览器中运行的 Dart 应用。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link linkend="ch04-tools-dart_analyzer">dartanalyzer: 静态
      分析器</link></term>

      <listitem>
        <para>用命令行来分析 Dart 代码。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link linkend="ch04-tools-dartdoc">dartdoc: API 文档
      生成器</link></term>

      <listitem>
        <para>从 Dart 代码中生成文档。</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>以上工具都包含在下载的 Dart 编辑器包中。你也可以单独
      下载 Dartium，也可以单独
      下载包含 pub、 dart2js、 dart、 dartanalyzer、
  和 dartdoc 的 SDK。参考 <ulink
  url="http://www.dartlang.cc/tools/">下载界面</ulink>
  。</para>

  <para>这些工具位于下载的 Dart 安装目录中的 <literal>dart-sdk/bin</literal> 
目录中。
如果你想使用这些命令行工具，建议把
 <literal>bin</literal> 目录添加到环境变量中去。
  </para>

  <sect1 id="ch04-tools-pub">
    <title>pub: Dart 包管理器</title>

    <para>你可以用 <emphasis>pub</emphasis> 来
        管理 Dart 包。一个 Dart 包只是一个包含多个 Dart 库和其他资源的目录。
        包还可以包含文档、测试、图片等资源。
        应用使用其他包的前提条件是该应用
        需要为一个包。
    </para>

    <note>
      <para>Dart 编辑器支持 pub 的功能，包含 创建、安装
          、更新、以及发布包等。
      </para>
    </note>

    <para>包可以位于任何地方。例如，一些包可能在 GitHub 上。
    Dart 团队在 <phrase
    role="keep-together"><ulink
    url="http://pub.dartlang.org">pub.dartlang.org</ulink></phrase> 发布
    包，我们也希望你在这里发布你的包。</para>

    <para>
        要使用 Dart 包中的库，你需要安装如下
        步骤操作：</para>

    <orderedlist continuation="restarts" inheritnum="ignore">
      <listitem>
        <para>创建一个 pubspec (该文件列出了
            库的依赖关系和其他元数据，例如 你的包
            的名字 等)。</para>
      </listitem>

      <listitem>
        <para>用 pub 获取你的应用所依赖的包。</para>
      </listitem>

      <listitem>
        <para>导入要使用的库。</para>
      </listitem>
    </orderedlist>

    <sect2 id="ch04-tools-pub-pubspec">
      <title>创建 Pubspec</title>

      <para>要使用其他包，你的应用必需创建一个 pubspec 文件并列出
          所依赖的包和包的下载地址。 pubspec 文件的名字为
        <literal moreinfo="none">pubspec.yaml</literal>，该文件必需
        位于你项目的根目录中。
</para>

      <para>下面是一个示例 pubspec 文件，指定了两个包。
          第一个使用了位于 pub.dartlang.org 的 js 包；
          第二个使用了位于 Dart SDK 的 intl 包：
 </para>

      <programlisting format="linespecific"><remark>lang-js
</remark>name: my_app
dependencies:
  js: any
  intl: any
    </programlisting>

      <para>详情请参考：<ulink
      url="http://pub.dartlang.org/doc/pubspec.html">pubspec
      文档</ulink> ，这里还包含了你可以使用的第三方包的介绍。</para>
    </sect2>

    <sect2 id="ch04-tools-pub-install">
      <title>安装包</title>

      <para>定义好 pubspec 文件后，就可以在项目根目录中运行 <literal moreinfo="none">pub
      get</literal> 来下载这些包：</para>

      <screen format="linespecific"><remark>lang-sh
</remark>cd <replaceable>my/app</replaceable>
pub get</screen>

      <para>该命令检测你的应用所依赖的包，并把这些包下载到一个中央缓存目录。
          对于 git 包，pub 则会 clone 该库的 git 库。而对于托管到文件服务器的库，
          pub 从 pub.dartlang.org 下载。 
          同时还下载了应用使用的包所依赖的包。
          例如，js 包依赖 unittest 包， 则 pub 会同时下载
          js 和 unittest 包。
      </para>

      <para>最后，pub 在你的应用根目录下创建一个 <literal moreinfo="none">packages</literal>
      目录，该目录连接了你应用中需要使用的包。
      </para>
    </sect2>

    <sect2 id="ch04-tools-pub-import">
      <title>从包中导入库</title>

      <para>要使用包中的库，使用 <literal
      moreinfo="none">package:</literal> 前缀导入库：</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>import 'package:js/js.dart' as js;
import 'package:intl/intl.dart';</programlisting>

      <para>Dart 运行环境将负责解析<literal
      moreinfo="none">package:</literal> 并从 <literal
      moreinfo="none">packages</literal> 目录中加载需要的库。</para>
    </sect2>

    <sect2 id="ch04-tools-pub-more-options">
      <title>其他信息</title>

      <para>运行 <literal
      moreinfo="none">pub
      --help</literal> 来查询其他命令。关于 pub 的其他信息以及
      如何发布你的包，请参考
       <ulink
      url="http://pub.dartlang.org/doc">pub 文档。</ulink></para>
    </sect2>
  </sect1>

  <sect1 id="ch04-tools-editor">
    <title>Dart 编辑器</title>

    <para>在 <xref linkend="ch01-editor" /> 我们已经介绍了 Dart 编辑器了。
        下面是使用 Dart 编辑器的一些有用的提示，例如
    <link linkend="ch04-editor-run-non-dartium">如何指定浏览器</link>
    和 <link linkend="ch04-editor-dart2js">编译为  JavaScript</link>。
    如果你遇到了问题，请参考 <ulink
    url="http://www.dartlang.cc/tools/editor/troubleshoot.html">
    Dart 编辑器问题指南。</ulink> Dart 编辑器更新比较快，
    所以这里的截图可能看起来不太一样。
    最新的信息 ，请参考 <ulink url="http://www.dartlang.cc/editor">Dart 编辑器文档。</ulink></para>

    <sect2 id="ch04-editor-view-samples">
      <title>查看示例项目</title>

      <para>Dart 编辑器的欢迎界面 (<xref
      linkend="DartEditor-initial" />) 显示了一些示例项目。
      只需要点击示例项目图片就可以打开该项目并查看其
      代码了。</para>

      <para>如果你没有看到欢迎界面，很有可能是之前你关闭该页面了。
      通过菜单 <emphasis role="bold">Tools &gt; Welcome
      Page</emphasis> 可以打开该页面。</para>
    </sect2>

    <sect2 id="ch04-editor-apps">
      <title>管理文件视图</title>

      <para>文件视图显示了 库的文件、安装的包的文件、和你的应用
          创建的文件。
      </para>

      <sect3 id="ch04-editor-apps-open">
        <title>添加应用</title>

        <para>下面是如何打开应用并在文件
            视图中显示的步骤：
	</para>

        <orderedlist continuation="restarts" inheritnum="ignore">
          <listitem>
            <para>打开 <emphasis role="bold">File</emphasis> 菜单，然后选择
              <emphasis role="bold">Open Existing Folder...</emphasis> ，
              或者用快捷键
             (<phrase
            role="keep-together"><emphasis
            role="bold">Ctrl+O</emphasis></phrase> 、在 Mac 系统用 <emphasis
            role="bold">Cmd+O</emphasis>)。</para>
          </listitem>

          <listitem>
            <para>找到
                包含应用的目录。
</para>
          </listitem>

          <listitem>
            <para>点击 <emphasis role="bold">Open</emphasis>。</para>
          </listitem>
        </orderedlist>

        <para>在文件视图中就可以看到该目录和其中的文件了。</para>
      </sect3>

      <sect3 id="ch04-editor-apps-remove">
        <title>删除应用</title>

        <para>你可以从文件视图中删除应用，可以同时删除磁盘上的文件也可以保留
            文件。</para>

        <para>右键 (或者 Ctrl+点击) 项目目录并选择 <emphasis
        role="bold">Delete</emphasis>。
        如果你想同时删除该项目在磁盘上的文件，则在删除对话框中选中
<emphasis
        role="bold">Delete project contents on disk</emphasis>。</para>
      </sect3>
    </sect2>

    <sect2 id="ch04-editor-create-app">
      <title>创建应用</title>

      <para>从头创建一个命令行应用或者 web 应用也是很简单的：</para>

      <orderedlist continuation="restarts" inheritnum="ignore">
        <listitem>
          <para>点击 New Application 按钮 <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figs/web/newapp.png" width="0.12in" />
              </imageobject>
            </inlinemediaobject> (在 Dart 编辑器的左上角)。
            或者选择菜单
          <emphasis role="bold">File &gt; New
          Application</emphasis> 。然后出现一个对话框。
          </para>
        </listitem>

        <listitem>
          <para>输入应用的名字，比如
          <code>hello_web</code>。如果你不想用默认的
          目录存放该项目，你可以选择一个新的目录。
          </para>
        </listitem>

        <listitem>
          <para>如果你真的不想让编辑器创建一些示例内容，则不要选中 <emphasis role="bold">Generate sample
          content</emphasis> 。</para>
        </listitem>

        <listitem>
          <para>选择要创建的应用类型，例如 命令行应用、 web 或者使用 
          <ulink
          url="http://www.dartlang.cc/polymer-dart/">Polymer.dart</ulink> 的 web 应用。</para>
        </listitem>

        <listitem>
          <para>点击 <emphasis role="bold">Finish</emphasis> 来
              创建一个带有一些示例文件的项目。</para>

          <para>
              在编辑视图中会打开默认的 Dart 文件，在 文件视图中会显示项目目录。
              创建后的 Dart 编辑器看起来应该和下图类似：
           <xref linkend="DartEditor-helloweb" />。</para>

          <figure float="0" id="DartEditor-helloweb">
            <title>使用默认示例代码创建的新应用</title>

            <mediaobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/daur_0401.png" format="PNG"
                           scale="75" />
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>
      </orderedlist>
    </sect2>

    <sect2 id="ch04-editor-edit">
      <title>编辑应用</title>

      <para>Dart 编辑器提供了一些编辑功能，
          例如 Dart 代码辅助、API 浏览、支持重构以及搜索文件等。
      </para>

      <sect3 id="ch04-editor-edit-autocomplete">
        <title>使用代码辅助</title>

        <para>代码辅助功能看起来如  <xref
        linkend="helloweb-dotcomplete" /> 所示。当你输入如下代码的时候，提示出现：</para>

        <itemizedlist>
          <listitem>
            <para>输入一个类或者变量名字，然后再输入一个圆点。
                </para>

            <para>例如  <code>document.</code> 或者
            <code>DateTime.</code> 然后暂停一小会。
            当代码建议面板出现后，在继续输入可以过滤建议的代码。
            </para>
          </listitem>

          <listitem>
            <para>按  <emphasis role="bold">Ctrl+Space</emphasis>。</para>

            <para>例如，输入  <code>Dat</code> 然后按 Ctrl+Space 来查看
                以 <quote>Dat</quote> 开头的类。</para>
          </listitem>
        </itemizedlist>

        <para>当代码建议面板出现后，你可以点击、输入或者用上下箭头来选择你先要的建议。
            按回车键（Enter）或者返回键（Return）选择代码建议，用
            退出键（Esc） 来关闭代码建议面板。
        </para>

        <figure float="none" id="helloweb-dotcomplete">
          <title>代码辅助建议</title>

          <mediaobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/daur_0402.png" format="PNG" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect3>

      <sect3 id="ch04-editor-edit-browse-apis">
        <title>浏览 APIs</title>

        <para>使用 Dart 编辑器可以很容易的查找 API 是在何处定义的。
            同时还可以列出所选 Dart 文件的内容大纲视图。</para>

        <sect4 id="browse-api-declaration">
          <title>查看 API 的更多信息</title>

          <para>要查看一个 API 的详细信息 -变量、函数、类型、
              库、等等 - 只需要在 编辑视图上把鼠标放到 API 名字上即可。
              Dart 编辑器会弹出一个面板来显示关于该 API 的更多信息。
            </para>
            
          <para>不管该 API 是否在当前文件定义，都可以通过如下方式找到该 API 的定义位置：</para>

          <orderedlist continuation="restarts" inheritnum="ignore">
            <listitem>
              <para>在 Dart 文件的编辑视图中，点击一个 API 。 Dart 编辑器会高亮当前文件
                  所有使用该 API 的地方。</para>
            </listitem>

            <listitem>
              <para>然后在该 API 上右键。</para>
            </listitem>

            <listitem>
              <para>选择菜单中的  <emphasis role="bold">Open Declaration</emphasis>
              选项。</para>

              <para>编辑器会打开该 API 的定义位置。
                  例如，如果你查询 querySelector 的定义位置，则编辑器
                  会打开定义   <literal>querySelector()</literal> 方法的文件。
		</para>
            </listitem>
          </orderedlist>
        </sect4>

        <sect4 id="browse-api-outline">
          <title>浏览文件大概</title>

          <para>通过快捷键 <emphasis role="bold">Alt+O</emphasis> (Mac 上为 <emphasis
          role="bold">Option+O</emphasis> ) 或者 右键并选择 
          <emphasis role="bold">Outline File</emphasis> 菜单。</para>

          <para>然后会弹出一个面板，在该面板中显示了当前文件定义的 类、函数、和变量。
              例如，  Sunflower 示例中的  <code>sunflower.dart</code> 文件的大纲
              面板如图所示：
               <xref linkend="sunflower-outline" /></para>

          <figure float="0" id="sunflower-outline">
            <title>Sunflower 示例的大纲面板</title>

            <mediaobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/daur_0403.png" format="PNG" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>你可以输入字符来过滤显示的内容。例如
              如果你输入
          <emphasis
          role="bold">c</emphasis>，则只会显示 <emphasis
          role="bold">center</emphasis> 和 <emphasis
          role="bold">context</emphasis> 变量。</para>

          <para>如果你选择了其中的一个条目，例如  <emphasis
          role="bold">centerX</emphasis>— 编辑器会把文件滚动到该条目定义的地方显示。</para>

          <para>另外，还有一个常驻的 大纲视图，通过菜单 
          <emphasis role="bold">Tools &gt; Outline</emphasis>来打开。</para>
        </sect4>
      </sect3>

      <sect3 id="ch04-editor-edit-refactor">
        <title>重构</title>

        <para>要修改代码的名字，在编辑文件视图中，可以把鼠标放到名字中间或者双击名字，然后右键选择菜单
            中的 <emphasis
        role="bold">Rename...</emphasis>选项。</para>

        <para>你几乎可以重命名任意内容，局部变量、方法参数、成员变量、函数、类型、顶级方法、库前缀
            、等等。 </para>
      </sect3>

      <sect3 id="ch04-editor-edit-searching">
        <title>搜索</title>

        <para>
            Dart 编辑器右上角的搜索输入框可以
        <phrase role="keep-together">直接定位到
        </phrase> 如下位置：</para>

        <itemizedlist>
          <listitem>
            <para>类型定义</para>
          </listitem>

          <listitem>
            <para>文件</para>
          </listitem>

          <listitem>
            <para>文件中的文本</para>
          </listitem>
        </itemizedlist>

        <para>
            搜索的范围为当前文件视图中的所有文件。
            在搜索视图中显示搜索结果。
            在搜索视图中，双击一个文件可以在编辑视图中显示该文件。
            在打开的文件中， 所有符合搜索的字符串都被高亮显示。
        </para>
      </sect3>
    </sect2>

    <sect2 id="ch04-editor-run">
      <title>运行应用</title>

      <para>只需要选择该应用的文件并点击 Dart 编辑器的 Run 按钮
      <inlinemediaobject>
          <imageobject>
            <imagedata fileref="figs/web/run.png" width="0.12in" />
          </imageobject>
        </inlinemediaobject> 就可以运行该应用。
      如果是 web 应用， Dart 编辑器会启动一个浏览器来运行该应用。
</para>

      <para>当用 Dart 编辑器运行 web 应用的时候，默认 Dart 编辑器会启动
          带有 Dart VM 的 Dartium 浏览器来直接运行 Dart 代码。
          如果你指定了其他的浏览器，则 Dart 编辑器用
       <link
      linkend="ch04-tools-dart2js">dart2js</link>  来把 Dart 代码
      编译为
      JavaScript 在浏览器中运行。</para>

      <sect3 id="ch04-editor-run-manage-launch">
        <title>设置启动配置</title>

        <para>通过菜单 <emphasis role="bold">Run &gt; Manage Launches</emphasis> 
            来设置多个启动配置。
        </para>

        <para>对于 Web 应用，你可以设置如下内容：</para>

        <itemizedlist>
          <listitem>
            <para>要打开的 HTML 文件或者 URL 地址</para>
          </listitem>

          <listitem>
            <para>传递给浏览器的参数。例如， <literal
            moreinfo="none">--allow-file-access-from-files</literal></para>
          </listitem>

          <listitem>
            <para>检测模式(checked mode) (只支持 Dartium )</para>
          </listitem>

          <listitem>
            <para>启用实验性功能  (只支持 Dartium)</para>
          </listitem>

          <listitem>
            <para>在哪里显示浏览器的 stdout 和 stderr 输出内容
            (只支持 Dartium ，可以帮助诊断  Dartium 崩溃问题)</para>
          </listitem>
        </itemizedlist>

        <para>例如，一个 web 应用可以有一个启动 
        Dartium 的配置和启动其他浏览器的配置。</para>

        <para>对于命令行应用，可以设置如下内容：</para>

        <itemizedlist>
          <listitem>
            <para>执行的 .dart </para>
          </listitem>

          <listitem>
            <para>工作目录</para>
          </listitem>

          <listitem>
            <para>传递给应用的参数</para>
          </listitem>

          <listitem>
            <para>检测模式</para>
          </listitem>
        </itemizedlist>
      </sect3>

      <sect3 id="ch04-editor-run-production-mode">
        <title>在生产模式下运行</title>

        <para>默认情况下，应用在 检测模式 运行.如果要在生产模式下运行，则可以在启动
            配置中禁用检测模式：</para>

        <orderedlist continuation="restarts" inheritnum="ignore">
          <listitem>
            <para>最少要运行一次该应用，这样就生成该启动配置项了。</para>
          </listitem>

          <listitem>
            <para>选择 <emphasis role="bold">Run &gt; Manage
            Launches</emphasis>或者点击 Run 按钮
            Run button <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="figs/web/run.png" width="0.12in" />
                </imageobject>
              </inlinemediaobject> 右边的三角形图标并选择 <emphasis role="bold">Manage
            Launches</emphasis>。</para>
          </listitem>

          <listitem>
            <para>在 Manage Launches 对话框中，找到你应用的启动配置。
                如果已经存在了，则选中该配置。</para>
          </listitem>

          <listitem>
            <para>不要选中 <emphasis role="bold">Run in checked
            mode</emphasis> (参考 <xref linkend="production-mode" />)。</para>

            <figure float="0" id="production-mode">
              <title>要在生产模式运行，不要选中 checked mode</title>

              <mediaobject>
                <imageobject role="web">
                  <imagedata fileref="figs/web/daur_0404.png" format="PNG" />
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>

          <listitem>
            <para>点击 <emphasis role="bold">Apply</emphasis> 来保存
                修改，或者点击 <emphasis role="bold">Run</emphasis> 来保存并
                运行应用。</para>
          </listitem>
        </orderedlist>

        <para>关于检测模式和生产模式的更多信息，请参考 <xref
        linkend="ch02-runtime-modes" />。</para>
      </sect3>

      <sect3 id="ch04-editor-run-non-dartium">
        <title>设置运行 JavaScript 的浏览器</title>

        <para>要设置一个浏览器来运行你应用的 JavaScript 版本，安装如下步骤操作：</para>

        <orderedlist continuation="restarts" inheritnum="ignore">
          <listitem>
            <para>选择
            <emphasis role="bold">Dart Editor &gt; Preferences</emphasis>.
            </para>
          </listitem>

          <listitem>
            <para>点击 <emphasis role="bold">Run and Debug</emphasis>.</para>
          </listitem>

          <listitem>
            <para>如果你不想用系统默认浏览器，则不要选中
             <emphasis role="bold">Use default <phrase
            role="keep-together">system browser</phrase></emphasis> ,并
            设置你想使用的浏览器文件位置。 <phrase
            role="keep-together"><emphasis>例如：</emphasis>
            /Applications/Firefox.app</phrase></para>
          </listitem>

          <listitem>
            <para>点击  <emphasis role="bold">OK</emphasis> 保存
                修改。</para>
          </listitem>
        </orderedlist>

        <para>现在 只要你用 JavaScript 来运行你的应用， Dart
            编辑器都会打开你选择的浏览器。
        </para>
	
        你也可以用默认的配置打开 JavaScript 应用。然后把网址复制到你想测试的浏览器中即可。
      </sect3>
    </sect2>

    <sect2 id="ch04-editor-debug">
      <title>调试应用</title>

      <para>在 Dart 编辑器中可以调试命令行应用和 web 应用。下面是一些提示：</para>

      <itemizedlist>
        <listitem>
          <para>
              在编辑视图代码每行左边距区域双击可以添加断点。
	</para>
        </listitem>

        <listitem>
          <para>
              用 调试器视图（Debugger view）来查看应用的状态和控制代码的执行。
              默认情况下，调试器视图在编辑视图的右边，当你第一次执行到断点代码位置处时，调试器视图自动打开
          (<xref
          linkend="debugger" />).</para>
        </listitem>

        <listitem>
          <para>要查看变量的只，把鼠标放到变量名字上，在 调试器视图 查看，或者用  Expression （表达式） 查看<inlinemediaobject>
              <imageobject>
                <imagedata fileref="figs/web/watchlist_view.gif"
                           width="0.12in" />
              </imageobject>
            </inlinemediaobject>.</para>
        </listitem>

        <listitem>
          <para>
              要调试 web 应用，需要用 Dartium 配合 Dart 编辑器。
              当调试的时候， 编辑器接管 Dartium 控制台。例如， 编辑器可以显示
          <literal>
          print()</literal> 语句打印的消息。</para>
        </listitem>
      </itemizedlist>

      <figure float="0" id="debugger">
        <title>用 Dart 编辑器调试 Sunflower 示例应用</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/daur_0406.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2 id="ch04-editor-dart2js">
      <title>编译为 JavaScript</title>

      <para>要把你的代码编译为 
      JavaScript 你无需做额外的工作。
      当你在启动配置中
       <link
      linkend="ch04-editor-run-non-dartium">设置了其他浏览器</link>，则 Dart 编辑器
      会在执行应用之前自动把 Dart 代码编译为 JavaScript。
      </para>

      <para>当然，你也可以不允许应用就可以把 Dart 代码编译为  JavaScript。
          通过菜单 <emphasis role="bold">Tools &gt; Generate
      JavaScript</emphasis>即可。另外还可以用命令行工具 dart2js
      (参考 <xref linkend="ch04-tools-dart2js" />).</para>
    </sect2>

    <sect2 id="ch04-editor-more">
      <title>其他功能</title>

      <para>Dart 编辑器还有很多功能，例如 生成文档、自定义界面和快捷键等。</para>

      <sect3 id="ch04-editor-more-dartdoc">
        <title>用 dartdoc 生成文档</title>

        <para>用工具 <emphasis role="bold">Tools &gt; Generate
        Dartdoc</emphasis> 菜单来生成 Dart 代码的 HTML 文档。
        关于文档格式的更多信息，请参考
        <xref linkend="comments-doc" />.</para>
      </sect3>

      <sect3 id="ch04-editor-more-preferences">
        <title>自定义 Dart 编辑器</title>

        <para>
            在 Preferences 对话框中你可以自定义编辑器的字体、边距、快捷键和其他内容。通过菜单
        <emphasis role="bold">Tools &gt; Preferences</emphasis> ( Mac:
        <emphasis role="bold">Dart Editor &gt; Preferences</emphasis>) 来打开该对话框。</para>

        <para>
            你还可以定制显示那些视图，和视图显示的位置和大小。通过 <emphasis
        role="bold">Tools</emphasis> 菜单添加视图。通过视图的
        <emphasis role="bold">X</emphasis> 图标来删除视图。
        拖动视图 tab 来移动视图到另外一个位置，可以移动到 Dart 编辑器的其他地方，也可以移出 
        Dart 编辑器。 拖动视图边缘可以放到缩小。</para>
      </sect3>

      <sect3 id="ch04-editor-more-keys">
        <title>快捷键提示</title>

        <para>通过菜单 <emphasis
        role="bold">Help &gt; Key Assist</emphasis> (<xref
        linkend="key-assist" />)可以查看可以使用的快捷键。</para>

        <figure float="0" id="key-assist">
          <title>Help &gt; Key Assist</title>

          <mediaobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/daur_0407.png" format="PNG" />
            </imageobject>
          </mediaobject>
        </figure>

        <?dbfo-need height=”75pt”?>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="ch04-tools-dartium">
    <title>Dartium: Chromium with the Dart VM</title>

    <para>This section tells you how to get and use Dartium, a Chromium-based
    browser that includes the Dart VM. This browser can execute Dart web apps
    directly, so you don’t have to compile your code to JavaScript until
    you’re ready to test on other browsers.</para>

    <warning>
      <para>This browser is a technical preview, and it might have security
      and stability issues. <emphasis role="bold">Do not use Dartium as your
      primary browser!</emphasis></para>
    </warning>

    <sect2 id="ch04-dartium-download">
      <title>Downloading and Installing the Browser</title>

      <para>If you have an up-to-date version of Dart Editor, you already have
      Dartium.</para>

      <para>If you don’t have Dart Editor or want a different version of
      Dartium, you can get it separately from the <ulink
      url="http://www.dartlang.cc/downloads.html">Downloads page.</ulink> The
      Dartium binary does expire after a while. When that happens, you’ll
      need to download a new copy if you want to continue using
      Dartium.</para>

      <para>You don’t usually need to do anything special to install Dartium:
      just unarchive the ZIP file. If you want Dart Editor to launch a
      particular copy of Dartium, then put that copy in the same directory 
      as the <literal
      moreinfo="none">dart-sdk</literal> directory of your Dart installation
      directory (see <xref linkend="ch01-editor-download" />), replacing the
      original copy of Chromium.</para>
    </sect2>

    <sect2 id="ch04-dartium-launch">
      <title>Launching the Browser</title>

      <para>To launch Dartium, navigate to its directory in your finder, and
      double-click the Chromium executable file. Or use Dart Editor as
      described in <xref linkend="ch04-editor-run" /> or the command line as
      described in <xref linkend="ch04-dartium-command" />.</para>

      <warning>
        <para><emphasis>If you already use Chromium:</emphasis> If another
        version of Chromium is open, then you could have a profile conflict.
        To avoid this, you can open Dartium or Chromium from the command line
        with the <phrase role="keep-together"><ulink
        url="http://www.chromium.org/user-experience/user-data-directory">--user-data-dir
        flag.</ulink></phrase></para>
      </warning>
    </sect2>

    <sect2 id="ch04-dartium-bug">
      <title>Filing Bugs</title>

      <para>If you find a bug in Dartium, create an issue in the Dart project
      and use the <ulink url="http://bit.ly/WO0U32">Dartium bug
      template.</ulink></para>
    </sect2>

    <sect2 id="ch04-dartium-linking">
      <title>Linking to Dart Source</title>

      <para>Use a script tag with a type <literal
      moreinfo="none">application/dart</literal> to link to your Dart source
      file. Example:</para>

      <programlisting format="linespecific"><remark>lang-html
</remark>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;body&gt;
    &lt;script type="application/dart" src="app.dart"&gt;&lt;/script&gt;

    &lt;!-- Support for non-Dart browsers. --&gt;
    &lt;script src="packages/browser/dart.js"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</programlisting>

      <note>
        <para>Dart Editor automatically adds both the <literal
        moreinfo="none">application/dart</literal> script tag and the
        <literal>dart.js</literal> script tag into the project’s main
        HTML file.</para>
      </note>
    </sect2>

    <sect2 id="ch04-dartium-detect">
      <title>Detecting Dart Support</title>

      <para>You can check whether a browser supports Dart
      with this JavaScript code:
      </para>

      <programlisting format="linespecific"><remark>lang-js
</remark>// In JavaScript code:
if (navigator.userAgent.indexOf('(Dart)') == -1) {
  // No native Dart support...
  window.addEventListener("DOMContentLoaded", function (e) {
      // ...Fall back to compiled JS...
    }
  }, false);
}</programlisting>
    </sect2>

    <sect2 id="ch04-dartium-command">
      <title>Launching from the Command Line</title>

      <para>Because Dartium is based on Chromium, all <ulink
      url="http://www.chromium.org/developers/how-tos/run-chromium-with-flags">Chromium
      flags</ulink> should work. In some cases, you might want to specify
      Dart-specific flags so that you can tweak the embedded Dart VM’s
      behavior. For example, while developing your web app, you might want the
      VM to verify type annotations and check assertions. To achieve that,
      you can enable checked mode (the VM’s <literal>--checked</literal>
      flag).</para>

      <para>On Linux, you can specify flags by starting Dartium as
      follows:</para>

      <screen format="linespecific"><remark>lang-sh
</remark>DART_FLAGS='--checked' <replaceable>path</replaceable>/chrome</screen>

      <para>On Mac:</para>

      <screen format="linespecific"><remark>lang-sh
</remark>DART_FLAGS='--checked'              \
  <replaceable>path</replaceable>/Chromium.app/Contents/MacOS/Chromium</screen>

      <para>Or (also on Mac):</para>

      <screen format="linespecific"><remark>lang-sh
</remark>DART_FLAGS='--checked'              \
   open <replaceable>path</replaceable>/Chromium.app</screen>

      <note>
        <para>You can see the command-line flags and executable path of your
        current Chromium-based browser by going to <literal
        moreinfo="none">chrome://version</literal>.</para>
      </note>
    </sect2>
  </sect1>

  <sect1 id="ch04-tools-dart2js">
    <title>dart2js: The Dart-to-JavaScript Compiler</title>

    <para>You can use the <emphasis>dart2js</emphasis> tool to compile Dart
    code to JavaScript. <link linkend="ch04-editor-dart2js">Dart Editor</link>
    uses dart2js behind the scenes whenever Dart Editor compiles to
    JavaScript. This section tells you how to use dart2js on the command line.
    It also give tips on debugging the JavaScript that dart2js
    generates.</para>

    <sect2 id="ch04-tools-dart2js-basic-usage">
      <title>Basic Usage</title>

      <para>Here’s an example of compiling a Dart file to JavaScript:</para>

      <screen format="linespecific"><remark>lang-sh
</remark>dart2js --out=test.js <replaceable>test.dart</replaceable></screen>

      <para>This command produces a file that contains the JavaScript
      equivalent of your Dart code. It also produces a source map, which can
      help you debug the JavaScript version of the app more easily.</para>
    </sect2>

    <sect2 id="ch04-tools-dart2js-options">
      <title>Options</title>

      <para>Common command-line options for dart2js include:</para>

      <variablelist role="keep-together">
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          -o<replaceable>&lt;file&gt;</replaceable></literal><emphasis> or
          </emphasis><literal>--out=<replaceable>&lt;file&gt;</replaceable></literal></term>

          <listitem>
            <para>Generate the output into
            <replaceable>&lt;file&gt;</replaceable>. If not specified, the
            output goes in a file named <literal
            moreinfo="none">out.js</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none"> -c</literal><emphasis>
          or </emphasis><literal>--checked</literal></term>

          <listitem>
            <para>Insert runtime type checks, and enable assertions (checked
            mode).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          --minify</literal></term>

          <listitem>
            <para>Generate minified output.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none"> -h</literal><emphasis>
          or </emphasis><literal>--help</literal></term>

          <listitem>
            <para>Display help. (Use <literal moreinfo="none">-vh</literal>
            for information about all options.)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          --output-type=dart</literal></term>

          <listitem>
            <para>Output Dart code instead of JavaScript. This option is
            useful when deploying your app, because it generates a single file
            containing everything the app needs.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="ch04-tools-dart2js-generating-efficient-code">
      <title>Helping dart2js Generate Better Code</title>

      <para>You can do a couple of things to improve the code that dart2js
      generates:</para>

      <itemizedlist>
        <listitem>
          <para>Write your code in a way that makes type inference
          easier.</para>
        </listitem>

        <listitem>
          <para>Once you’re ready to deploy your app, use the dart2js --minify
          option to reduce code size.</para>
        </listitem>
      </itemizedlist>

      <note>
        <para>Don’t worry about the size of your app’s included libraries.
        Thanks to a feature called <emphasis>tree shaking,</emphasis> dart2js
        omits unused classes, functions, methods, and so on. Just import the
        libraries you need, and let dart2js get rid of what you don’t
        need.</para>
      </note>

      <para>Follow these practices to help dart2js do better type inference,
      so it can generate smaller and faster JavaScript code:</para>

      <itemizedlist>
        <listitem>
          <para>Avoid setting variables to null.</para>
        </listitem>

        <listitem>
          <para>Use const or final variables wherever possible.</para>
        </listitem>

        <listitem>
          <para>Be consistent with the types of arguments you pass into each
          function or method.</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 id="tools-dart2js-debugging">
      <title>Debugging</title>

      <para>This section gives tips for debugging dart2js-produced code in
      Chrome, Firefox, and Safari. Debugging the JavaScript produced by
      dart2js is easiest in browsers such as Chrome that support source
      maps.</para>

      <para>Whichever browser you use, you should enable pausing on at least
      uncaught exceptions, and perhaps on all exceptions. For frameworks such
      as dart:isolate and dart:async that wrap user code in try-catch, we
      recommend pausing on all exceptions.</para>

      <sect3 id="dart2js-debugging-chrome">
        <title>Chrome</title>

        <para>To debug in Chrome:</para>

        <orderedlist>
          <listitem>
            <para>Open the Developer Tools window, as described in <ulink
            url="https://developers.google.com/chrome-developer-tools/docs/overview">How
            to Access the Developer Tools.</ulink></para>
          </listitem>

          <listitem>
            <para>Turn on source maps, as described in the video <ulink
            url="http://bit.ly/YugIUY">SourceMaps in Chrome.</ulink></para>
          </listitem>

          <listitem>
            <para>Enable debugging, either on all exceptions or only on
            uncaught exceptions, <phrase role="">as described in <ulink
            url="https://developers.google.com/chrome-developer-tools/docs/scripts-breakpoints#pause-on-exceptions">Pause
            on Exceptions</ulink> </phrase>and <ulink
            url="https://developers.google.com/chrome-developer-tools/docs/scripts-breakpoints#pause-on-uncaught-exceptions">Pause
            on Uncaught Exceptions,</ulink> respectively.</para>
          </listitem>

          <listitem>
            <para>Reload your application.</para>
          </listitem>
        </orderedlist>
      </sect3>

      <sect3 id="dart2js-debugging-firefox">
        <title>Firefox</title>

        <para>Firefox doesn’t yet support source maps (see <ulink
        url="https://bugzilla.mozilla.org/show_bug.cgi?id=771597">bug
        #771597</ulink>). To debug in Firefox:</para>

        <orderedlist role="keep-together">
          <listitem>
            <para>Enable the Developer Toolbar, as described in Kevin
            Dangoor’s blog post, <ulink
            url="https://hacks.mozilla.org/2012/08/new-firefox-command-line-helps-you-develop-faster/">New
            Firefox Command Line Helps You Develop Faster.</ulink></para>
          </listitem>

          <listitem>
            <para>Click the <emphasis role="bold">Debugger</emphasis> button
            at the bottom of the browser, and enable <emphasis
            role="bold">Pause on exceptions</emphasis>. (See <xref
            linkend="FirefoxDeveloperToolbar" />.)</para>
          </listitem>

          <listitem>
            <para>Reload your application.</para>
          </listitem>
        </orderedlist>

        <figure id="FirefoxDeveloperToolbar">
          <title>Firefox’s Developer Toolbar</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/daur_0408.png" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect3>

      <sect3 id="dart2js-debugging-safari">
        <title>Safari</title>

        <para>To debug in Safari:</para>

        <orderedlist>
          <listitem>
            <para>Turn on the Develop menu, as described in the <ulink
            url="https://developer.apple.com/library/safari/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/GettingStarted/GettingStarted.html#//apple_ref/doc/uid/TP40007874-CH2-SW1">Safari
            Web Inspector Guide</ulink>.</para>
          </listitem>

          <listitem>
            <para>Enable breaks, either on all exceptions or only on uncaught
            exceptions. See Figure 4-2 on the Safari <ulink
            url="https://developer.apple.com/library/safari/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Debugger/Debugger.html#//apple_ref/doc/uid/TP40007874-CH5-SW1">Debugging</ulink>
            page.</para>
          </listitem>

          <listitem>
            <para>Reload your application.</para>
          </listitem>
        </orderedlist>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="ch04-tools-dart-vm">
    <title>dart: The Standalone VM</title>

    <para>You can use the <emphasis>dart</emphasis> tool (<literal
    moreinfo="none">bin/dart</literal>) to run Dart command-line apps such as
    server-side scripts, programs, and servers. During development, you also
    have the option to run command-line apps using <link
    linkend="ch04-editor-run">Dart Editor</link>.</para>

    <sect2 id="ch04-tools-dart-vm-basic-usage">
      <title>Basic Usage</title>

      <para>Here’s an example of running a Dart file on the command
      line:</para>

      <screen format="linespecific"><remark>lang-sh
</remark>dart <replaceable>test.dart</replaceable></screen>
    </sect2>

    <sect2 id="ch04-tools-dart-vm-options">
      <title>Options</title>

      <para>Common command-line options for dart include:</para>

      <variablelist>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          --enable-checked-mode</literal><emphasis> or
          </emphasis><literal>--checked</literal></term>

          <listitem>
            <para>Enable <emphasis>both</emphasis> assertions and type checks
            (checked mode).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--package-root=</literal><replaceable>&lt;path&gt;</replaceable></term>

          <listitem>
            <para>Specify where to find imported libraries.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          --print-flags</literal></term>

          <listitem>
            <para>Print all the command-line options.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="ch04-tools-dart-vm-type-checks">
      <title>Enabling Checked Mode</title>

      <para>Dart programs run in one of two modes: checked or production. By
      default, the Dart VM runs in production mode. We recommend that you
      enable checked mode for development and testing.</para>

      <para>In checked mode, assignments are dynamically checked, and certain
      violations of the type system raise exceptions at runtime. In
      production mode, static type annotations have no effect.</para>

      <para>Assert statements are also enabled in checked mode. An <link
      linkend="assert">assert statement</link> checks a boolean condition,
      raising an exception if the condition is false. Assertions do not run in
      production mode.</para>

      <para>You can run the VM in checked mode with the
      <literal>--checked</literal> command-line flag:</para>

      <screen format="linespecific"><remark>lang-sh
</remark>dart --checked <replaceable>test.dart</replaceable></screen>
    </sect2>
  </sect1>

  <sect1 id="ch04-tools-dart_analyzer">
    <title>dartanalyzer: The Static Analyzer</title>

    <para>You can use the <emphasis>dartanalyzer</emphasis> tool (<literal
    moreinfo="none">bin/dartanalyzer</literal>) to statically analyze your
    code at the command line, checking for errors and warnings that are
    specified in the <ulink url="http://www.dartlang.cc/docs/spec/">Dart
    Language Specification.</ulink></para>

    <note>
      <para>Dart Editor performs the same analysis that dartanalyzer does, but
      with additional checks for common mistakes. A previous static analyzer,
      called <emphasis>dart_analyzer</emphasis>, is no longer
      supported.</para>
    </note>

    <sect2 id="ch04-tools-dart_analyzer-basic-usage">
      <title>Basic Usage</title>

      <para>Here’s an example of testing a Dart file:</para>

      <screen format="linespecific"><remark>lang-sh
</remark>dartanalyzer --package-root <replaceable>code/packages</replaceable> <replaceable>test.dart</replaceable></screen>

      <para>As <xref linkend="ch04-dartanalyzer-exit" /> shows, the exit code
      of dartanalyzer tells you whether the code passed analysis.</para>

      <table id="ch04-dartanalyzer-exit">
        <title>Exit codes for dartanalyzer</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Exit code</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>0</entry>

              <entry>No issues found</entry>
            </row>

            <row>
              <entry>1</entry>

              <entry>Warnings found (but no errors)</entry>
            </row>

            <row>
              <entry>2</entry>

              <entry>Errors found</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="ch04-tools-dart_analyzer-options">
      <title>Options</title>

      <para>You can use the following command-line options with
      dartanalyzer:</para>

      <variablelist>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--dart-sdk
          <replaceable>&lt;path&gt;</replaceable></literal></term>

          <listitem>
            <para>Specify the directory that contains the Dart SDK.</para>
          </listitem>

        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--package-root
          <replaceable>&lt;path&gt;</replaceable></literal></term>

          <listitem>
            <para>Specify the directory to search for any libraries that are
            imported using <literal>package:</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--show-package-warnings</literal></term>

          <listitem>
            <para>Show warnings not only for code in the specified .dart file
            and others in its library, but also for libraries imported with
            <literal>package:</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--machine</literal></term>

          <listitem>
            <para>Produce output in a format suitable for parsing.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--version</literal></term>

          <listitem>
            <para>Show the analyzer version.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--help</literal></term>

          <listitem>
            <para>Show all the command-line options.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <sect1 id="ch04-tools-dartdoc">
    <title>dartdoc: The API Documentation Generator</title>

    <para>You can use the <emphasis>dartdoc</emphasis> tool (<literal
    moreinfo="none">bin/dartdoc</literal>) to generate documentation from your
    Dart code. By default, dartdoc parses and creates documentation for the
    .dart files that you pass to it, plus the libraries they import.</para>

    <para>To improve dartdoc’s output, provide documentation comments as
    described in <xref linkend="comments-doc" />. Also see the article <ulink
    url="http://www.dartlang.cc/articles/doc-comment-guidelines/">Guidelines
    for Dart Doc <phrase
    role="keep-together">Comments</phrase>.</ulink></para>

    <sect2 id="ch04-tools-dartdoc-basic-usage">
      <title>Basic Usage</title>

      <para>Here’s an example of generating documentation from a Dart
      file.</para>

      <screen format="linespecific"><remark>lang-sh
</remark>dartdoc --out=/docs/mylib <replaceable>mylib.dart</replaceable></screen>

      <para>By default, the generated documentation appears in a directory
      named <literal>docs/</literal>.</para>
    </sect2>

    <sect2 id="ch04-tools-dartdoc-options">
      <title>Options</title>

      <para>Common command-line options for dartdoc include:</para>

      <variablelist>
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--out=<replaceable>&lt;absolute_path&gt;</replaceable></literal></term>

          <listitem>
            <para>Put the documentation in the specified directory. If the
            directory doesn’t already exist, it’s created.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--no-code</literal></term>

          <listitem>
            <para>Don’t include source code in the generated
            documentation.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--exclude-lib=<replaceable>&lt;identifier&gt;</replaceable></literal></term>

          <listitem>
            <para>Don’t generate documentation for the specified
            library.</para>

            <para><phrase role="keep-together"><emphasis>Example:</emphasis>
            <literal>--exclude-lib=metadata</literal></phrase></para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--omit-generation-time</literal></term>

          <listitem>
            <para>Don’t put a timestamp at the bottom of every page.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--mode=static</literal></term>

          <listitem>
            <para>Use static HTML navigation. The resulting files can be much
            larger than the default, but previewing docs locally is
            easier.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--package-root=<replaceable>&lt;path&gt;</replaceable></literal></term>

          <listitem>
            <para>Specify where to find imported libraries. You might need to
            use this option if dartdoc can’t find a library because your
            directory structure doesn’t match <ulink
            url="http://pub.dartlang.org/doc/package-layout.html">pub’s
            package layout conventions.</ulink> <emphasis>Example:</emphasis>
            <literal>--package-root=foo/packages/</literal></para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--help</literal></term>

          <listitem>
            <para>Print all the command-line options.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <sect1 id="ch04-summary">
    <title>Summary</title>

    <para>This chapter covered the most commonly used Dart tools. All of them
    are available in the Dart Editor download, but you can also download
    Dartium or the SDK separately.</para>
  </sect1>
</chapter>
