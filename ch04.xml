<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="ch04">
  <title>Tools</title>

  <para>Dart provides several tools to help you write and deploy your web and
  command-line apps:</para>

  <variablelist>
    <varlistentry>
      <term><link linkend="ch04-tools-pub">pub: The Dart package
      manager</link></term>

      <listitem>
        <para>Download and install packages of libraries.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link linkend="ch04-tools-editor">Dart Editor</link></term>

      <listitem>
        <para>Edit, run, and debug web and command-line apps.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link linkend="ch04-tools-dartium">Dartium: Chromium with the Dart
      VM </link></term>

      <listitem>
        <para>Run Dart web apps. This is a special build of Chromium (the
        project behind Google Chrome).</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link linkend="ch04-tools-dart2js">dart2js: The Dart-to-JavaScript
      compiler</link></term>

      <listitem>
        <para>Convert your web app to JavaScript, so it can run in non-Dartium
        browsers.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link linkend="ch04-tools-dart-vm">dart: The standalone Dart
      VM</link></term>

      <listitem>
        <para>Run your command-line apps—server-side scripts, programs,
        servers, and any other apps that don’t run in a browser.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link linkend="ch04-tools-dart_analyzer">dartanalyzer: The Static
      Analyzer</link></term>

      <listitem>
        <para>Analyze your Dart source from the command line.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link linkend="ch04-tools-dartdoc">dartdoc: The API Documentation
      Generator</link></term>

      <listitem>
        <para>Generate documentation from your Dart source.</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>All of these tools are in the Dart Editor bundle, since the editor
  uses Dartium and the other tools. You can also download Dartium separately,
  and you can download an SDK that includes pub, dart2js, dart, dartanalyzer,
  and dartdoc. See the <ulink
  url="http://www.dartlang.org/downloads.html">Downloads page</ulink> for
  links and details.</para>

  <para>The tools are in the <literal>dart-sdk/bin</literal> directory
  of your Dart installation directory.
  If you intend to use tools such as pub, dart2js, and dart from the command
  line, add the <literal>bin</literal> directory to your path.
  </para>

  <sect1 id="ch04-tools-pub">
    <title>pub: The Dart Package Manager</title>

    <para>You can use the <emphasis>pub</emphasis> tool to
    manage Dart packages. A Dart package is simply a directory containing any
    number of Dart libraries and a list of the library dependencies. A package
    can also contain resources for its libraries, such as documentation,
    tests, and images. If your app uses one or more packages, then your app
    itself must be a package.</para>

    <note>
      <para>Dart Editor offers support for using pub, including creating,
      installing, updating, and publishing packages.</para>
    </note>

    <para>A package can live anywhere. For example, some packages are 
    on GitHub. The Dart team publishes packages at <phrase
    role="keep-together"><ulink
    url="http://pub.dartlang.org">pub.dartlang.org</ulink>,</phrase> and we
    hope you will, too.</para>

    <para>To use a library that’s in a Dart package, you need to do the
    following:</para>

    <orderedlist continuation="restarts" inheritnum="ignore">
      <listitem>
        <para>Create a pubspec (a file that lists package
        dependencies and includes other metadata,
        such as a name for your package).</para>
      </listitem>

      <listitem>
        <para>Use pub to get your package's dependencies.</para>
      </listitem>

      <listitem>
        <para>Import the library.</para>
      </listitem>
    </orderedlist>

    <sect2 id="ch04-tools-pub-pubspec">
      <title>Creating a Pubspec</title>

      <para>To use a package, your application must define a pubspec that
      lists dependencies and their download locations. The pubspec is a file
      named <literal moreinfo="none">pubspec.yaml</literal>, and it must be in
      the top directory of your application.</para>

      <para>Here is an example of a pubspec that specifies the locations of
      two packages. First, it points to the js package that’s hosted on
      pub.dartlang.org, and then it points to the intl package in the Dart
      SDK:</para>

      <programlisting format="linespecific"><remark>lang-js
</remark>name: my_app
dependencies:
  js: any
  intl: any
    </programlisting>

      <para>For details, see the <ulink
      url="http://pub.dartlang.org/doc/pubspec.html">pubspec
      documentation</ulink> and the documentation for the packages you’re
      interested in using.</para>
    </sect2>

    <sect2 id="ch04-tools-pub-install">
      <title>Installing Packages</title>

      <para>Once you have a pubspec, you can run <literal moreinfo="none">pub
      get</literal> from the top directory of your application:</para>

      <screen format="linespecific"><remark>lang-sh
</remark>cd <replaceable>my/app</replaceable>
pub get</screen>

      <para>This command determines which packages your app depends on, and
      puts them in a central cache. For git dependencies, pub clones the git
      repository. For hosted dependencies, pub downloads the package from
      pub.dartlang.org. Transitive dependencies are included, too. For
      example, if the js package is dependent on the unittest package, the pub
      tool grabs both the js package and the unittest package.</para>

      <para>Finally, pub creates a <literal moreinfo="none">packages</literal>
      directory (under your app’s top directory) that has links to the
      packages that your app depends on.</para>
    </sect2>

    <sect2 id="ch04-tools-pub-import">
      <title>Importing Libraries from Packages</title>

      <para>To import libraries found in packages, use the <literal
      moreinfo="none">package:</literal> prefix:</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>import 'package:js/js.dart' as js;
import 'package:intl/intl.dart';</programlisting>

      <para>The Dart runtime takes everything after <literal
      moreinfo="none">package:</literal> and looks it up within the <literal
      moreinfo="none">packages</literal> directory for your app.</para>
    </sect2>

    <sect2 id="ch04-tools-pub-more-options">
      <title>More Information</title>

      <para>Run <literal
      moreinfo="none">pub
      --help</literal> for a list of commands. For more information about pub,
      including publishing your own packages, see the <ulink
      url="http://pub.dartlang.org/doc">pub documentation.</ulink></para>
    </sect2>
  </sect1>

  <sect1 id="ch04-tools-editor">
    <title>Dart Editor</title>

    <para>We already introduced Dart Editor in <xref linkend="ch01-editor" />.
    Here are some more tips on using Dart Editor, with information such as
    <link linkend="ch04-editor-run-non-dartium">specifying a browser</link>
    and <link linkend="ch04-editor-dart2js">compiling to JavaScript</link>. If
    you run into a problem, see <ulink
    url="http://www.dartlang.org/tools/editor/troubleshoot.html">Troubleshooting
    Dart Editor.</ulink> Dart Editor is updated frequently, so it probably
    looks different from what you see here. For the latest information, see
    the <ulink url="http://www.dartlang.org/editor">Dart Editor
    documentation.</ulink></para>

    <sect2 id="ch04-editor-view-samples">
      <title>Viewing Samples</title>

      <para>The Welcome page of Dart Editor (<xref
      linkend="DartEditor-initial" />) displays a few samples. To open a
      sample and look at its source code, click the sample’s image.</para>

      <para>If you don’t see the Welcome page, you probably closed it. Get it
      back with <emphasis role="bold">Tools &gt; Welcome
      Page</emphasis>.</para>
    </sect2>

    <sect2 id="ch04-editor-apps">
      <title>Managing the Files View</title>

      <para>The Files view shows the files that implement the libraries
      included in Dart, installed packages,
      as well as all the apps that you create or
      open.</para>

      <sect3 id="ch04-editor-apps-open">
        <title>Adding apps</title>

        <para>Here’s how to open an app, which makes it appear in your Files
        view:</para>

        <orderedlist continuation="restarts" inheritnum="ignore">
          <listitem>
            <para>Go to the <emphasis role="bold">File</emphasis> menu, and
            choose <emphasis role="bold">Open Existing Folder...</emphasis>.
            Or use the keyboard shortcut (<phrase
            role="keep-together"><emphasis
            role="bold">Ctrl+O</emphasis></phrase> or, on Mac, <emphasis
            role="bold">Cmd+O</emphasis>).</para>
          </listitem>

          <listitem>
            <para>Browse
            to the directory that contains the app’s files.</para>
          </listitem>

          <listitem>
            <para>Click <emphasis role="bold">Open</emphasis>.</para>
          </listitem>
        </orderedlist>

        <para>The directory and all its files appear in the Files view.</para>
      </sect3>

      <sect3 id="ch04-editor-apps-remove">
        <title>Removing apps</title>

        <para>You can remove an app from the Files view, either with or
        without deleting its files.</para>

        <para>Right-click (or Ctrl+click) the directory and choose <emphasis
        role="bold">Delete</emphasis>. If you want to delete the app’s files
        permanently, then in the dialog that comes up, choose <emphasis
        role="bold">Delete project contents on disk</emphasis>.</para>
      </sect3>
    </sect2>

    <sect2 id="ch04-editor-create-app">
      <title>Creating Apps</title>

      <para>It’s easy to create a simple web or command-line app from
      scratch:</para>

      <orderedlist continuation="restarts" inheritnum="ignore">
        <listitem>
          <para>Click the New Application button <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figs/web/newapp.png" width="0.12in" />
              </imageobject>
            </inlinemediaobject> (at the upper left of Dart Editor).
          Alternatively, choose <emphasis role="bold">File &gt; New
          Application</emphasis> from the Dart Editor menu. A dialog
          appears.</para>
        </listitem>

        <listitem>
          <para>Type in a name for your application—for example,
          <code>hello_web</code>. If you don’t like the default parent
          directory, type in a new location or browse to choose the
          location.</para>
        </listitem>

        <listitem>
          <para>Unless you really don’t want files to be automatically created
          for you, make sure <emphasis role="bold">Generate sample
          content</emphasis> is selected.</para>
        </listitem>

        <listitem>
          <para>Select the kind of application you’re writing, such as command
          line, web, or web using <ulink
          url="http://www.dartlang.org/polymer-dart/">Polymer.dart.</ulink></para>
        </listitem>

        <listitem>
          <para>Click <emphasis role="bold">Finish</emphasis> to create a
          directory with initial files for the app.</para>

          <para>A default Dart file appears in the Edit view, and its
          directory appears in the Files view. Your Dart Editor window should
          look something like <xref linkend="DartEditor-helloweb" />.</para>

          <figure float="0" id="DartEditor-helloweb">
            <title>A new app, pre-filled with basic, runnable code</title>

            <mediaobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/daur_0401.png" format="PNG"
                           scale="75" />
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>
      </orderedlist>
    </sect2>

    <sect2 id="ch04-editor-edit">
      <title>Editing Apps</title>

      <para>Dart Editor provides the basic editing functionality you’d expect,
      plus features such as Dart code completion, API browsing, support for
      refactoring, and the ability to search multiple files.</para>

      <sect3 id="ch04-editor-edit-autocomplete">
        <title>Using autocomplete</title>

        <para>Autocomplete suggestions look something like <xref
        linkend="helloweb-dotcomplete" />. They appear when you either:</para>

        <itemizedlist>
          <listitem>
            <para>Type a class or variable name, and then type a
            period.</para>

            <para>For example, type <code>document.</code> or
            <code>DateTime.</code> and pause a moment. Once the suggestions
            appear, continue typing to pare down the list.</para>
          </listitem>

          <listitem>
            <para>Type <emphasis role="bold">Ctrl+Space</emphasis>.</para>

            <para>For example, type <code>Dat</code>, then Ctrl+Space to see a
            list of classes that start with <quote>Dat</quote>.</para>
          </listitem>
        </itemizedlist>

        <para>When the suggestions come up, you can click, type, or use the
        arrow keys to select the one you want. Press Enter or Return to choose
        a suggestion, or Esc to dismiss the panel.</para>

        <figure float="none" id="helloweb-dotcomplete">
          <title>Autocomplete suggestions</title>

          <mediaobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/daur_0402.png" format="PNG" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect3>

      <sect3 id="ch04-editor-edit-browse-apis">
        <title>Browsing APIs</title>

        <para>With Dart Editor you can easily find where APIs are declared.
        You can also outline the contents of a Dart file.</para>

        <sect4 id="browse-api-declaration">
          <title>Finding out more about an API</title>

          <para>To get more information about an API item-variable, method,
            type, library, and so on-hover the mouse over the item in the
            Edit view. Dart Editor displays a popup that provides more
            information about that item.</para>
            
          <para>To go to the declaration of an API item, either within the
          same .dart file or in another file:</para>

          <orderedlist continuation="restarts" inheritnum="ignore">
            <listitem>
              <para>In the Edit view of a Dart file, click on
                an API item. Dart Editor highlights the item and all other
                occurrences of the item.</para>
            </listitem>

            <listitem>
              <para>Right click.</para>
            </listitem>

            <listitem>
              <para>Choose <emphasis role="bold">Open Declaration</emphasis>
              in the menu.</para>

              <para>The editor displays the file that declares the item. For
              example, if you open the declaration for querySelector, the file
              that declares the <literal>querySelector()</literal> function
              appears.</para>
            </listitem>
          </orderedlist>
        </sect4>

        <sect4 id="browse-api-outline">
          <title>Outlining a file’s contents</title>

          <para>Press <emphasis role="bold">Alt+O</emphasis> (<emphasis
          role="bold">Option+O</emphasis> on Mac) or right-click and choose
          <emphasis role="bold">Outline File</emphasis>.</para>

          <para>A panel comes up displaying the classes, methods, and fields
          declared in the current Dart file. For example, the outline for the
          Sunflower sample’s <code>sunflower.dart</code> file looks something
          like <xref linkend="sunflower-outline" />.</para>

          <figure float="0" id="sunflower-outline">
            <title>The Outline panel for the Sunflower sample</title>

            <mediaobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/daur_0403.png" format="PNG" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>You can reduce the size of the list by typing one or more
          characters. For example, if you type <emphasis
          role="bold">c</emphasis>, only the <emphasis
          role="bold">center</emphasis> and <emphasis
          role="bold">context</emphasis> variables appear.</para>

          <para>If you choose an item from the list—for example, <emphasis
          role="bold">centerX</emphasis>— the editor scrolls to its
          declaration.</para>

          <para>Alternatively, add a more permanent outline view by choosing
          <emphasis role="bold">Tools &gt; Outline</emphasis>.</para>
        </sect4>
      </sect3>

      <sect3 id="ch04-editor-edit-refactor">
        <title>Refactoring</title>

        <para>To change the name of an item throughout your code, put the
        cursor within (or double-click) the item’s name in the Edit view, and
        right-click and choose <emphasis
        role="bold">Rename...</emphasis>.</para>

        <para>You can rename almost anything—local variables, function
        parameters, fields, methods, types, top-level functions, library
        prefixes, top-level compilation units, and more. An example of
        renaming a top-level compilation unit is changing the name of a file
        that’s sourced by a library.</para>
      </sect3>

      <sect3 id="ch04-editor-edit-searching">
        <title>Searching</title>

        <para>The search field at the upper right of the Dart Editor window is
        an easy way to go <phrase role="keep-together">directly
        to:</phrase></para>

        <itemizedlist>
          <listitem>
            <para>Types</para>
          </listitem>

          <listitem>
            <para>Files</para>
          </listitem>

          <listitem>
            <para>Text inside of files</para>
          </listitem>
        </itemizedlist>

        <para>The scope of a text search is every file in your Files view.
        Results for text searches come up in a Search view. Within that view,
        double-click a file to see it in the Edit view. All occurrences of the
        search string in the Edit view are highlighted.</para>
      </sect3>
    </sect2>

    <sect2 id="ch04-editor-run">
      <title>Running Apps</title>

      <para>To run any Dart app, click Dart Editor’s Run button
      <inlinemediaobject>
          <imageobject>
            <imagedata fileref="figs/web/run.png" width="0.12in" />
          </imageobject>
        </inlinemediaobject> while a file in that app is selected. If you’re
      working on a web app, Dart Editor brings up a browser window that
      displays the app’s HTML page, with the app’s code running inside
      it.</para>

      <para>When you run a web application using Dart Editor, by default the
      app uses the copy of Dartium that’s included in the Dart Editor
      download, with the Dart code executing directly in the browser. If your
      launch configuration specifies a browser, then Dart Editor uses <link
      linkend="ch04-tools-dart2js">dart2js</link> to compile the Dart code to
      JavaScript that executes in the browser.</para>

      <sect3 id="ch04-editor-run-manage-launch">
        <title>Specifying launch configurations</title>

        <para>Use <emphasis role="bold">Run &gt; Manage Launches</emphasis> to
        specify as many launch configurations as you like.</para>

        <para>For web apps, you can specify the following:</para>

        <itemizedlist>
          <listitem>
            <para>HTML file or URL to open</para>
          </listitem>

          <listitem>
            <para>arguments to pass to the browser; for example, <literal
            moreinfo="none">--allow-file-access-from-files</literal></para>
          </listitem>

          <listitem>
            <para>checked mode (Dartium only)</para>
          </listitem>

          <listitem>
            <para>enable experimental features (Dartium only)</para>
          </listitem>

          <listitem>
            <para>whether to show the browser’s stdout and stderr output
            (Dartium only; useful for diagnosing Dartium crashes)</para>
          </listitem>
        </itemizedlist>

        <para>For example, a web app might have a launch configuration for
        Dartium and several more configurations corresponding to additional
        browsers you want to test.</para>

        <para>You can specify the following for command-line apps:</para>

        <itemizedlist>
          <listitem>
            <para>.dart file to execute</para>
          </listitem>

          <listitem>
            <para>working directory</para>
          </listitem>

          <listitem>
            <para>arguments to pass to the app</para>
          </listitem>

          <listitem>
            <para>checked mode</para>
          </listitem>
        </itemizedlist>
      </sect3>

      <sect3 id="ch04-editor-run-production-mode">
        <title>Running in production mode</title>

        <para>By default, apps run in checked mode. To run in production mode
        instead, disable checked mode in your app’s launch
        configuration:</para>

        <orderedlist continuation="restarts" inheritnum="ignore">
          <listitem>
            <para>Run your app at least once, so that it has a launch
            configuration.</para>
          </listitem>

          <listitem>
            <para>Choose <emphasis role="bold">Run &gt; Manage
            Launches</emphasis>, or click the little arrow to the right of the
            Run button <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="figs/web/run.png" width="0.12in" />
                </imageobject>
              </inlinemediaobject> and choose <emphasis role="bold">Manage
            Launches</emphasis>.</para>
          </listitem>

          <listitem>
            <para>In the Manage Launches dialog, find a launch configuration
            for your app. Click it if it isn’t already selected.</para>
          </listitem>

          <listitem>
            <para>Unselect <emphasis role="bold">Run in checked
            mode</emphasis> (see <xref linkend="production-mode" />).</para>

            <figure float="0" id="production-mode">
              <title>To run in production mode, unselect checked mode</title>

              <mediaobject>
                <imageobject role="web">
                  <imagedata fileref="figs/web/daur_0404.png" format="PNG" />
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>

          <listitem>
            <para>Click <emphasis role="bold">Apply</emphasis> to save your
            change, or <emphasis role="bold">Run</emphasis> to save it and run
            your app.</para>
          </listitem>
        </orderedlist>

        <para>For details about checked mode and production mode, see <xref
        linkend="ch02-runtime-modes" />.</para>
      </sect3>

      <sect3 id="ch04-editor-run-non-dartium">
        <title>Specifying a browser for JavaScript launches</title>

        <para>To specify the browser in which to run the JavaScript version
        of your web apps:</para>

        <orderedlist continuation="restarts" inheritnum="ignore">
          <listitem>
            <para>Choose
            <emphasis role="bold">Dart Editor &gt; Preferences</emphasis>.
            </para>
          </listitem>

          <listitem>
            <para>Click <emphasis role="bold">Run and Debug</emphasis>.</para>
          </listitem>

          <listitem>
            <para>Unless you want to use the default system browser,
            unselect <emphasis role="bold">Use default <phrase
            role="keep-together">system browser</phrase></emphasis> and
            specify the location of the browser you want to use. <phrase
            role="keep-together"><emphasis>Example:</emphasis>
            /Applications/Firefox.app</phrase></para>
          </listitem>

          <listitem>
            <para>Click <emphasis role="bold">OK</emphasis> to save your
            changes.</para>
          </listitem>
        </orderedlist>

        <para>Now whenever you run an app as JavaScript,
        Dart Editor will invoke your browser of choice.
        </para>

        Alternatively, you can run your app as JavaScript using
        the default browser setting and then copy and paste the URL into
        a different browser.
      </sect3>
    </sect2>

    <sect2 id="ch04-editor-debug">
      <title>Debugging Apps</title>

      <para>You can debug both command-line and web apps with Dart Editor.
      Some tips:</para>

      <itemizedlist>
        <listitem>
          <para>Set breakpoints by double-clicking in the left margin of the
          Edit view.</para>
        </listitem>

        <listitem>
          <para>Use the Debugger view to view your app’s state and control its
          execution. By default, the Debugger view is to the right of the Edit
          view and appears when you first hit a breakpoint (<xref
          linkend="debugger" />).</para>
        </listitem>

        <listitem>
          <para>To see the value of a variable, mouse over it, look in the
          Debugger view, or use an Expression <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figs/web/watchlist_view.gif"
                           width="0.12in" />
              </imageobject>
            </inlinemediaobject>.</para>
        </listitem>

        <listitem>
          <para>To debug web apps, use Dart Editor with Dartium. While you’re
          debugging, Dart Editor takes the place of the Dartium console. For
          example, Dart Editor displays the output of<literal>
          print()</literal> statements.</para>
        </listitem>
      </itemizedlist>

      <figure float="0" id="debugger">
        <title>Using Dart Editor to debug the Sunflower sample app</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/daur_0406.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2 id="ch04-editor-dart2js">
      <title>Compiling to JavaScript</title>

      <para>You might not need to do anything to compile your code to
      JavaScript. When you run an app using a launch configuration that <link
      linkend="ch04-editor-run-non-dartium">specifies a browser</link>, Dart
      Editor automatically compiles the app to JavaScript before executing it
      in the browser.</para>

      <para>However, you can also compile Dart code to JavaScript without
      running the app. Just choose <emphasis role="bold">Tools &gt; Generate
      JavaScript</emphasis>. Another option is using dart2js from the command
      line (see <xref linkend="ch04-tools-dart2js" />).</para>
    </sect2>

    <sect2 id="ch04-editor-more">
      <title>Other Features</title>

      <para>Dart Editor has many additional features, including doc
      generation, customization, and keyboard alternatives.</para>

      <sect3 id="ch04-editor-more-dartdoc">
        <title>Generating documentation with dartdoc</title>

        <para>Use the <emphasis role="bold">Tools &gt; Generate
        Dartdoc</emphasis> command to generate HTML documentation from Dart
        code. For information on supplying text for the documentation, see
        <xref linkend="comments-doc" />.</para>
      </sect3>

      <sect3 id="ch04-editor-more-preferences">
        <title>Customizing Dart Editor</title>

        <para>You can customize the editor’s font, margins, key bindings, and
        more using the Preferences dialog. To bring up the dialog, choose
        <emphasis role="bold">Tools &gt; Preferences</emphasis> (on Mac:
        <emphasis role="bold">Dart Editor &gt; Preferences</emphasis>).</para>

        <para>You can also customize which views you see in Dart Editor, as
        well as their size and position. To add views, use the <emphasis
        role="bold">Tools</emphasis> menu. To remove a view, click its
        <emphasis role="bold">X</emphasis>. To move a view, drag its tab to a
        different position, either within or outside of the Dart Editor
        window. To resize a view, drag its edges.</para>
      </sect3>

      <sect3 id="ch04-editor-more-keys">
        <title>Keyboard alternatives</title>

        <para>To get a list of all keyboard alternatives, choose <emphasis
        role="bold">Help &gt; Key Assist</emphasis> (<xref
        linkend="key-assist" />).</para>

        <figure float="0" id="key-assist">
          <title>Help &gt; Key Assist</title>

          <mediaobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/daur_0407.png" format="PNG" />
            </imageobject>
          </mediaobject>
        </figure>

        <?dbfo-need height=”75pt”?>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="ch04-tools-dartium">
    <title>Dartium: Chromium with the Dart VM</title>

    <para>This section tells you how to get and use Dartium, a Chromium-based
    browser that includes the Dart VM. This browser can execute Dart web apps
    directly, so you don’t have to compile your code to JavaScript until
    you’re ready to test on other browsers.</para>

    <warning>
      <para>This browser is a technical preview, and it might have security
      and stability issues. <emphasis role="bold">Do not use Dartium as your
      primary browser!</emphasis></para>
    </warning>

    <sect2 id="ch04-dartium-download">
      <title>Downloading and Installing the Browser</title>

      <para>If you have an up-to-date version of Dart Editor, you already have
      Dartium.</para>

      <para>If you don’t have Dart Editor or want a different version of
      Dartium, you can get it separately from the <ulink
      url="http://www.dartlang.org/downloads.html">Downloads page.</ulink> The
      Dartium binary does expire after a while. When that happens, you’ll
      need to download a new copy if you want to continue using
      Dartium.</para>

      <para>You don’t usually need to do anything special to install Dartium:
      just unarchive the ZIP file. If you want Dart Editor to launch a
      particular copy of Dartium, then put that copy in the same directory 
      as the <literal
      moreinfo="none">dart-sdk</literal> directory of your Dart installation
      directory (see <xref linkend="ch01-editor-download" />), replacing the
      original copy of Chromium.</para>
    </sect2>

    <sect2 id="ch04-dartium-launch">
      <title>Launching the Browser</title>

      <para>To launch Dartium, navigate to its directory in your finder, and
      double-click the Chromium executable file. Or use Dart Editor as
      described in <xref linkend="ch04-editor-run" /> or the command line as
      described in <xref linkend="ch04-dartium-command" />.</para>

      <warning>
        <para><emphasis>If you already use Chromium:</emphasis> If another
        version of Chromium is open, then you could have a profile conflict.
        To avoid this, you can open Dartium or Chromium from the command line
        with the <phrase role="keep-together"><ulink
        url="http://www.chromium.org/user-experience/user-data-directory">--user-data-dir
        flag.</ulink></phrase></para>
      </warning>
    </sect2>

    <sect2 id="ch04-dartium-bug">
      <title>Filing Bugs</title>

      <para>If you find a bug in Dartium, create an issue in the Dart project
      and use the <ulink url="http://bit.ly/WO0U32">Dartium bug
      template.</ulink></para>
    </sect2>

    <sect2 id="ch04-dartium-linking">
      <title>Linking to Dart Source</title>

      <para>Use a script tag with a type <literal
      moreinfo="none">application/dart</literal> to link to your Dart source
      file. Example:</para>

      <programlisting format="linespecific"><remark>lang-html
</remark>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;body&gt;
    &lt;script type="application/dart" src="app.dart"&gt;&lt;/script&gt;

    &lt;!-- Support for non-Dart browsers. --&gt;
    &lt;script src="packages/browser/dart.js"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</programlisting>

      <note>
        <para>Dart Editor automatically adds both the <literal
        moreinfo="none">application/dart</literal> script tag and the
        <literal>dart.js</literal> script tag into the project’s main
        HTML file.</para>
      </note>
    </sect2>

    <sect2 id="ch04-dartium-detect">
      <title>Detecting Dart Support</title>

      <para>You can check whether a browser supports Dart
      with this JavaScript code:
      </para>

      <programlisting format="linespecific"><remark>lang-js
</remark>// In JavaScript code:
if (navigator.userAgent.indexOf('(Dart)') == -1) {
  // No native Dart support...
  window.addEventListener("DOMContentLoaded", function (e) {
      // ...Fall back to compiled JS...
    }
  }, false);
}</programlisting>
    </sect2>

    <sect2 id="ch04-dartium-command">
      <title>Launching from the Command Line</title>

      <para>Because Dartium is based on Chromium, all <ulink
      url="http://www.chromium.org/developers/how-tos/run-chromium-with-flags">Chromium
      flags</ulink> should work. In some cases, you might want to specify
      Dart-specific flags so that you can tweak the embedded Dart VM’s
      behavior. For example, while developing your web app, you might want the
      VM to verify type annotations and check assertions. To achieve that,
      you can enable checked mode (the VM’s <literal>--checked</literal>
      flag).</para>

      <para>On Linux, you can specify flags by starting Dartium as
      follows:</para>

      <screen format="linespecific"><remark>lang-sh
</remark>DART_FLAGS='--checked' <replaceable>path</replaceable>/chrome</screen>

      <para>On Mac:</para>

      <screen format="linespecific"><remark>lang-sh
</remark>DART_FLAGS='--checked'              \
  <replaceable>path</replaceable>/Chromium.app/Contents/MacOS/Chromium</screen>

      <para>Or (also on Mac):</para>

      <screen format="linespecific"><remark>lang-sh
</remark>DART_FLAGS='--checked'              \
   open <replaceable>path</replaceable>/Chromium.app</screen>

      <note>
        <para>You can see the command-line flags and executable path of your
        current Chromium-based browser by going to <literal
        moreinfo="none">chrome://version</literal>.</para>
      </note>
    </sect2>
  </sect1>

  <sect1 id="ch04-tools-dart2js">
    <title>dart2js: The Dart-to-JavaScript Compiler</title>

    <para>You can use the <emphasis>dart2js</emphasis> tool to compile Dart
    code to JavaScript. <link linkend="ch04-editor-dart2js">Dart Editor</link>
    uses dart2js behind the scenes whenever Dart Editor compiles to
    JavaScript. This section tells you how to use dart2js on the command line.
    It also give tips on debugging the JavaScript that dart2js
    generates.</para>

    <sect2 id="ch04-tools-dart2js-basic-usage">
      <title>Basic Usage</title>

      <para>Here’s an example of compiling a Dart file to JavaScript:</para>

      <screen format="linespecific"><remark>lang-sh
</remark>dart2js --out=test.js <replaceable>test.dart</replaceable></screen>

      <para>This command produces a file that contains the JavaScript
      equivalent of your Dart code. It also produces a source map, which can
      help you debug the JavaScript version of the app more easily.</para>
    </sect2>

    <sect2 id="ch04-tools-dart2js-options">
      <title>Options</title>

      <para>Common command-line options for dart2js include:</para>

      <variablelist role="keep-together">
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          -o<replaceable>&lt;file&gt;</replaceable></literal><emphasis> or
          </emphasis><literal>--out=<replaceable>&lt;file&gt;</replaceable></literal></term>

          <listitem>
            <para>Generate the output into
            <replaceable>&lt;file&gt;</replaceable>. If not specified, the
            output goes in a file named <literal
            moreinfo="none">out.js</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none"> -c</literal><emphasis>
          or </emphasis><literal>--checked</literal></term>

          <listitem>
            <para>Insert runtime type checks, and enable assertions (checked
            mode).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          --minify</literal></term>

          <listitem>
            <para>Generate minified output.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none"> -h</literal><emphasis>
          or </emphasis><literal>--help</literal></term>

          <listitem>
            <para>Display help. (Use <literal moreinfo="none">-vh</literal>
            for information about all options.)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          --output-type=dart</literal></term>

          <listitem>
            <para>Output Dart code instead of JavaScript. This option is
            useful when deploying your app, because it generates a single file
            containing everything the app needs.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="ch04-tools-dart2js-generating-efficient-code">
      <title>Helping dart2js Generate Better Code</title>

      <para>You can do a couple of things to improve the code that dart2js
      generates:</para>

      <itemizedlist>
        <listitem>
          <para>Write your code in a way that makes type inference
          easier.</para>
        </listitem>

        <listitem>
          <para>Once you’re ready to deploy your app, use the dart2js --minify
          option to reduce code size.</para>
        </listitem>
      </itemizedlist>

      <note>
        <para>Don’t worry about the size of your app’s included libraries.
        Thanks to a feature called <emphasis>tree shaking,</emphasis> dart2js
        omits unused classes, functions, methods, and so on. Just import the
        libraries you need, and let dart2js get rid of what you don’t
        need.</para>
      </note>

      <para>Follow these practices to help dart2js do better type inference,
      so it can generate smaller and faster JavaScript code:</para>

      <itemizedlist>
        <listitem>
          <para>Avoid setting variables to null.</para>
        </listitem>

        <listitem>
          <para>Use const or final variables wherever possible.</para>
        </listitem>

        <listitem>
          <para>Be consistent with the types of arguments you pass into each
          function or method.</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 id="tools-dart2js-debugging">
      <title>Debugging</title>

      <para>This section gives tips for debugging dart2js-produced code in
      Chrome, Firefox, and Safari. Debugging the JavaScript produced by
      dart2js is easiest in browsers such as Chrome that support source
      maps.</para>

      <para>Whichever browser you use, you should enable pausing on at least
      uncaught exceptions, and perhaps on all exceptions. For frameworks such
      as dart:isolate and dart:async that wrap user code in try-catch, we
      recommend pausing on all exceptions.</para>

      <sect3 id="dart2js-debugging-chrome">
        <title>Chrome</title>

        <para>To debug in Chrome:</para>

        <orderedlist>
          <listitem>
            <para>Open the Developer Tools window, as described in <ulink
            url="https://developers.google.com/chrome-developer-tools/docs/overview">How
            to Access the Developer Tools.</ulink></para>
          </listitem>

          <listitem>
            <para>Turn on source maps, as described in the video <ulink
            url="http://bit.ly/YugIUY">SourceMaps in Chrome.</ulink></para>
          </listitem>

          <listitem>
            <para>Enable debugging, either on all exceptions or only on
            uncaught exceptions, <phrase role="">as described in <ulink
            url="https://developers.google.com/chrome-developer-tools/docs/scripts-breakpoints#pause-on-exceptions">Pause
            on Exceptions</ulink> </phrase>and <ulink
            url="https://developers.google.com/chrome-developer-tools/docs/scripts-breakpoints#pause-on-uncaught-exceptions">Pause
            on Uncaught Exceptions,</ulink> respectively.</para>
          </listitem>

          <listitem>
            <para>Reload your application.</para>
          </listitem>
        </orderedlist>
      </sect3>

      <sect3 id="dart2js-debugging-firefox">
        <title>Firefox</title>

        <para>Firefox doesn’t yet support source maps (see <ulink
        url="https://bugzilla.mozilla.org/show_bug.cgi?id=771597">bug
        #771597</ulink>). To debug in Firefox:</para>

        <orderedlist role="keep-together">
          <listitem>
            <para>Enable the Developer Toolbar, as described in Kevin
            Dangoor’s blog post, <ulink
            url="https://hacks.mozilla.org/2012/08/new-firefox-command-line-helps-you-develop-faster/">New
            Firefox Command Line Helps You Develop Faster.</ulink></para>
          </listitem>

          <listitem>
            <para>Click the <emphasis role="bold">Debugger</emphasis> button
            at the bottom of the browser, and enable <emphasis
            role="bold">Pause on exceptions</emphasis>. (See <xref
            linkend="FirefoxDeveloperToolbar" />.)</para>
          </listitem>

          <listitem>
            <para>Reload your application.</para>
          </listitem>
        </orderedlist>

        <figure id="FirefoxDeveloperToolbar">
          <title>Firefox’s Developer Toolbar</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/daur_0408.png" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect3>

      <sect3 id="dart2js-debugging-safari">
        <title>Safari</title>

        <para>To debug in Safari:</para>

        <orderedlist>
          <listitem>
            <para>Turn on the Develop menu, as described in the <ulink
            url="https://developer.apple.com/library/safari/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/GettingStarted/GettingStarted.html#//apple_ref/doc/uid/TP40007874-CH2-SW1">Safari
            Web Inspector Guide</ulink>.</para>
          </listitem>

          <listitem>
            <para>Enable breaks, either on all exceptions or only on uncaught
            exceptions. See Figure 4-2 on the Safari <ulink
            url="https://developer.apple.com/library/safari/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Debugger/Debugger.html#//apple_ref/doc/uid/TP40007874-CH5-SW1">Debugging</ulink>
            page.</para>
          </listitem>

          <listitem>
            <para>Reload your application.</para>
          </listitem>
        </orderedlist>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="ch04-tools-dart-vm">
    <title>dart: The Standalone VM</title>

    <para>You can use the <emphasis>dart</emphasis> tool (<literal
    moreinfo="none">bin/dart</literal>) to run Dart command-line apps such as
    server-side scripts, programs, and servers. During development, you also
    have the option to run command-line apps using <link
    linkend="ch04-editor-run">Dart Editor</link>.</para>

    <sect2 id="ch04-tools-dart-vm-basic-usage">
      <title>Basic Usage</title>

      <para>Here’s an example of running a Dart file on the command
      line:</para>

      <screen format="linespecific"><remark>lang-sh
</remark>dart <replaceable>test.dart</replaceable></screen>
    </sect2>

    <sect2 id="ch04-tools-dart-vm-options">
      <title>Options</title>

      <para>Common command-line options for dart include:</para>

      <variablelist>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          --enable-checked-mode</literal><emphasis> or
          </emphasis><literal>--checked</literal></term>

          <listitem>
            <para>Enable <emphasis>both</emphasis> assertions and type checks
            (checked mode).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--package-root=</literal><replaceable>&lt;path&gt;</replaceable></term>

          <listitem>
            <para>Specify where to find imported libraries.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          --print-flags</literal></term>

          <listitem>
            <para>Print all the command-line options.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="ch04-tools-dart-vm-type-checks">
      <title>Enabling Checked Mode</title>

      <para>Dart programs run in one of two modes: checked or production. By
      default, the Dart VM runs in production mode. We recommend that you
      enable checked mode for development and testing.</para>

      <para>In checked mode, assignments are dynamically checked, and certain
      violations of the type system raise exceptions at runtime. In
      production mode, static type annotations have no effect.</para>

      <para>Assert statements are also enabled in checked mode. An <link
      linkend="assert">assert statement</link> checks a boolean condition,
      raising an exception if the condition is false. Assertions do not run in
      production mode.</para>

      <para>You can run the VM in checked mode with the
      <literal>--checked</literal> command-line flag:</para>

      <screen format="linespecific"><remark>lang-sh
</remark>dart --checked <replaceable>test.dart</replaceable></screen>
    </sect2>
  </sect1>

  <sect1 id="ch04-tools-dart_analyzer">
    <title>dartanalyzer: The Static Analyzer</title>

    <para>You can use the <emphasis>dartanalyzer</emphasis> tool (<literal
    moreinfo="none">bin/dartanalyzer</literal>) to statically analyze your
    code at the command line, checking for errors and warnings that are
    specified in the <ulink url="http://www.dartlang.org/docs/spec/">Dart
    Language Specification.</ulink></para>

    <note>
      <para>Dart Editor performs the same analysis that dartanalyzer does, but
      with additional checks for common mistakes. A previous static analyzer,
      called <emphasis>dart_analyzer</emphasis>, is no longer
      supported.</para>
    </note>

    <sect2 id="ch04-tools-dart_analyzer-basic-usage">
      <title>Basic Usage</title>

      <para>Here’s an example of testing a Dart file:</para>

      <screen format="linespecific"><remark>lang-sh
</remark>dartanalyzer --package-root <replaceable>code/packages</replaceable> <replaceable>test.dart</replaceable></screen>

      <para>As <xref linkend="ch04-dartanalyzer-exit" /> shows, the exit code
      of dartanalyzer tells you whether the code passed analysis.</para>

      <table id="ch04-dartanalyzer-exit">
        <title>Exit codes for dartanalyzer</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Exit code</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>0</entry>

              <entry>No issues found</entry>
            </row>

            <row>
              <entry>1</entry>

              <entry>Warnings found (but no errors)</entry>
            </row>

            <row>
              <entry>2</entry>

              <entry>Errors found</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="ch04-tools-dart_analyzer-options">
      <title>Options</title>

      <para>You can use the following command-line options with
      dartanalyzer:</para>

      <variablelist>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--dart-sdk
          <replaceable>&lt;path&gt;</replaceable></literal></term>

          <listitem>
            <para>Specify the directory that contains the Dart SDK.</para>
          </listitem>

        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--package-root
          <replaceable>&lt;path&gt;</replaceable></literal></term>

          <listitem>
            <para>Specify the directory to search for any libraries that are
            imported using <literal>package:</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--show-package-warnings</literal></term>

          <listitem>
            <para>Show warnings not only for code in the specified .dart file
            and others in its library, but also for libraries imported with
            <literal>package:</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--machine</literal></term>

          <listitem>
            <para>Produce output in a format suitable for parsing.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--version</literal></term>

          <listitem>
            <para>Show the analyzer version.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--help</literal></term>

          <listitem>
            <para>Show all the command-line options.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <sect1 id="ch04-tools-dartdoc">
    <title>dartdoc: The API Documentation Generator</title>

    <para>You can use the <emphasis>dartdoc</emphasis> tool (<literal
    moreinfo="none">bin/dartdoc</literal>) to generate documentation from your
    Dart code. By default, dartdoc parses and creates documentation for the
    .dart files that you pass to it, plus the libraries they import.</para>

    <para>To improve dartdoc’s output, provide documentation comments as
    described in <xref linkend="comments-doc" />. Also see the article <ulink
    url="http://www.dartlang.org/articles/doc-comment-guidelines/">Guidelines
    for Dart Doc <phrase
    role="keep-together">Comments</phrase>.</ulink></para>

    <sect2 id="ch04-tools-dartdoc-basic-usage">
      <title>Basic Usage</title>

      <para>Here’s an example of generating documentation from a Dart
      file.</para>

      <screen format="linespecific"><remark>lang-sh
</remark>dartdoc --out=/docs/mylib <replaceable>mylib.dart</replaceable></screen>

      <para>By default, the generated documentation appears in a directory
      named <literal>docs/</literal>.</para>
    </sect2>

    <sect2 id="ch04-tools-dartdoc-options">
      <title>Options</title>

      <para>Common command-line options for dartdoc include:</para>

      <variablelist>
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--out=<replaceable>&lt;absolute_path&gt;</replaceable></literal></term>

          <listitem>
            <para>Put the documentation in the specified directory. If the
            directory doesn’t already exist, it’s created.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--no-code</literal></term>

          <listitem>
            <para>Don’t include source code in the generated
            documentation.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--exclude-lib=<replaceable>&lt;identifier&gt;</replaceable></literal></term>

          <listitem>
            <para>Don’t generate documentation for the specified
            library.</para>

            <para><phrase role="keep-together"><emphasis>Example:</emphasis>
            <literal>--exclude-lib=metadata</literal></phrase></para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--omit-generation-time</literal></term>

          <listitem>
            <para>Don’t put a timestamp at the bottom of every page.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--mode=static</literal></term>

          <listitem>
            <para>Use static HTML navigation. The resulting files can be much
            larger than the default, but previewing docs locally is
            easier.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--package-root=<replaceable>&lt;path&gt;</replaceable></literal></term>

          <listitem>
            <para>Specify where to find imported libraries. You might need to
            use this option if dartdoc can’t find a library because your
            directory structure doesn’t match <ulink
            url="http://pub.dartlang.org/doc/package-layout.html">pub’s
            package layout conventions.</ulink> <emphasis>Example:</emphasis>
            <literal>--package-root=foo/packages/</literal></para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term role="plain"><literal moreinfo="none">
          </literal><literal>--help</literal></term>

          <listitem>
            <para>Print all the command-line options.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <sect1 id="ch04-summary">
    <title>Summary</title>

    <para>This chapter covered the most commonly used Dart tools. All of them
    are available in the Dart Editor download, but you can also download
    Dartium or the SDK separately.</para>
  </sect1>
</chapter>
