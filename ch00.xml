<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<preface id="preface">
  <?dbhtml stop-chunking?>

  <title>Preface</title>

  <para>你并不需要成为编程高手才能开发 WEB 应用。使用 Dart ,当你为当今的互联网开
  发高性能应用时，你将会非常富有创造力。</para>

  <para>这本书的目标是成为一本实用的Dart语言入门书，包含语言介绍、类库介绍、
  工具介绍。由于本书很短，而且 Dart 也很年轻，你同样需要查阅 Dart 官方网站
  <ulink url="http://dartlang.org"></ulink>—获取更多的细节以及后续更新。 
  关注 Google+ <ulink url="http://google.com/+dartlang">Dart 网页</ulink> 
  获取最新的新闻。</para>

  <para>另外一个重要的网站是本书的 <ulink
  url="https://github.com/dart-lang/dart-up-and-running-book">GitHub
  仓库</ulink> 本文在 <ulink
  url="http://creativecommons.org/licenses/by-nc-nd/3.0/us/">Creative Commons
  Attribution-Noncommercial-No Derivative Works 3.0 United States
  License</ulink> 的许可下使用该书的内容。这本书中例子的源代码文件 <ulink
  url="https://github.com/dart-lang/dart-up-and-running-book/tree/master/code"><literal>code/</literal>
  subdirectory.</ulink> 直接下载源代码文件进行学习将会取得更好的效果</para>

  <para>如果你发现本书内容或例子代码有错误，请在这里 <ulink
  url="https://github.com/dart-lang/dart-up-and-running-book/issues/new">创建一个
  问题</ulink>反馈</para>

  <sect1 id="preface-conventions">
    <title>本书中的一些习俗</title>

    <para>下面是本书印刷上的一些习俗:</para>

    <variablelist>
      <varlistentry>
        <term><emphasis>斜体</emphasis></term>

        <listitem>
          <para>标示新的术语, 网址, 电子邮件地址, 文件名, 以及文件扩展名</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal moreinfo="none">固定宽度的文字</literal></term>

        <listitem>
          <para>程序列表，或者是在段落中出现的变量名、方法名、数据库、数据
          类型、环境变量、语句或关键字</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><userinput moreinfo="none">粗体固定宽度的文字</userinput></term>

        <listitem>
          <para>指命令或者其他需要被用户逐字敲入的文本</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>斜体固定宽度的文字</replaceable></term>

        <listitem>
          <para>指那些需要用户提供值来替换的值或者由运行环境决定的值。</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <tip>
      <para>这个图标表示一个小窍门或建议或一般的注释。</para>
    </tip>

    <caution>
      <para>这个图标标示一个警告或劝告。</para>
    </caution>
  </sect1>

  <sect1 id="preface-examples">
    <title>使用例子中的代码</title>

    <para>这本书可以帮助你顺利的完成工作。通常，你可能会使用这本书中的代码用于
    你的程序或文档。如果你不是直接复制完整的样例代码以做它用就不需要联系我们获
    取使用许可。例如，在你的程序中使用本书中的代码是不需要许可的。出售或者发布
    一个本书中样例库的 CD 是需要许可的。通过引用本书中的例子来回答问题不需要许
    可。融合大量的本书案例代码到你的文档中是需要许可的。</para>

    <para>如果你标明引用代码的出处，我们将十分感谢，但这不是必须的。出处信息通
    常包括 <phrase role="keep-together">标题, 作者,</phrase>出版商, 和 ISBN。 
    例如: “<emphasis>Dart:启动和运行</emphasis> by Kathy <phrase role="keep-together">Walrath
    and</phrase> Seth Ladd (O’Reilly). Copyright 2013 Kathy Walrath and Seth
    Ladd, 978-1-449-33089-7.”</para>

    <para>如果你觉得使用这些代码的方式需要一份许可，可以随时联系我们
    <email>permissions@oreilly.com</email>.</para>
  </sect1>

  <sect1 id="preface-safari">
    <title>Safari® Books Online</title>

    <note role="safarienabled">
      <para>Safari Books Online (<ulink role="orm:hideurl:ital"
      url="http://my.safaribooksonline.com/?portal=oreilly">www.safaribooksonline.com</ulink>)
      is an on-demand digital library that delivers expert <ulink
      role="orm:hideurl"
      url="http://www.safaribooksonline.com/content">content</ulink> in both
      book and video form from the world’s leading authors in technology and
      business.</para>
    </note>

    <para>Technology professionals, software developers, web designers, and
    business and creative professionals use Safari Books Online as their
    primary resource for research, problem solving, learning, and
    certification training.</para>

    <para>Safari Books Online offers a range of <ulink role="orm:hideurl"
    url="http://www.safaribooksonline.com/subscriptions">product mixes</ulink>
    and pricing programs for <ulink role="orm:hideurl"
    url="http://www.safaribooksonline.com/organizations-teams">organizations</ulink>,
    <ulink role="orm:hideurl"
    url="http://www.safaribooksonline.com/government">government
    agencies</ulink>, and <ulink role="orm:hideurl"
    url="http://www.safaribooksonline.com/individuals">individuals</ulink>.
    Subscribers have access to thousands of books, training videos, and
    prepublication manuscripts in one fully searchable database from
    publishers like O’Reilly Media, Prentice Hall Professional, Addison-Wesley
    Professional, Microsoft Press, Sams, Que, Peachpit Press, Focal Press,
    Cisco Press, John Wiley &amp; Sons, Syngress, Morgan Kaufmann, IBM
    Redbooks, Packt, Adobe Press, FT Press, Apress, Manning, New Riders,
    McGraw-Hill, Jones &amp; Bartlett, Course Technology, and dozens <ulink
    role="orm:hideurl"
    url="http://www.safaribooksonline.com/publishers">more</ulink>. For more
    information about Safari Books Online, please visit us <ulink
    role="orm:hideurl"
    url="http://www.safaribooksonline.com/">online</ulink>.</para>
  </sect1>

  <sect1 id="preface-contact">
    <title>How to Contact Us</title>

    <para>Please address comments and questions concerning this book to the
    publisher:</para>

    <simplelist type="vert">
      <member>O’Reilly Media, Inc.</member>

      <member>1005 Gravenstein Highway North</member>

      <member>Sebastopol, CA 95472</member>

      <member>800-998-9938 (in the United States or Canada)</member>

      <member>707-829-0515 (international or local)</member>

      <member>707-829-0104 (fax)</member>
    </simplelist>

    <para>We have a web page for this book, where we list errata, examples,
    and any additional information. You can access this page at <ulink
    url="http://oreil.ly/Dart_Up_and_Running"></ulink>.</para>

    <para>To comment or ask technical questions about this book, send email to
    <email>bookquestions@oreilly.com</email>.</para>

    <para>For more information about our books, courses, conferences, and
    news, see our website at <ulink
    url="http://www.oreilly.com"></ulink>.</para>

    <para>Find us on Facebook: <ulink
    url="http://facebook.com/oreilly"></ulink></para>

    <para>Follow us on Twitter: <ulink
    url="http://twitter.com/oreillymedia"></ulink></para>

    <para>Watch us on YouTube: <ulink
    url="http://www.youtube.com/oreillymedia"></ulink></para>
  </sect1>

  <sect1 id="preface-updates">
    <title>Content Updates</title>

    <para>This section gives details about how the book has changed since its
    first and second printings.</para>

    <sect2 id="preface-updates-v3">
      <title>Changes After the Second Printing</title>

      <para>We've changed the text and examples to reflect these language
      changes:</para>

      <itemizedlist>
        <listitem>
          <para>Instance variables can no longer be <literal>const</literal>.
          Use <literal>static const</literal> variables instead.</para>
        </listitem>

        <listitem>
          <para>The <literal>?</literal> operator for testing whether an
          optional parameter has been set is no longer in the language.</para>
        </listitem>

        <listitem>
          <para>Keys in map literals no longer need to be strings.</para>
        </listitem>

        <listitem>
          <para>Dart now has Symbols and symbol literals
          (<literal>#<replaceable>identifier</replaceable></literal>): <xref
          linkend="ch02-symbols" />.</para>
        </listitem>

        <listitem>
          <para>Function equality testing is easier: <xref
          linkend="ch02-function-equality" />.</para>
        </listitem>

        <listitem>
          <para>Bitwise operators have higher precedence than they used
          to.</para>
        </listitem>
      </itemizedlist>

      <para>We've also updated the content to reflect API changes. In
      dart:core:</para>

      <itemizedlist>
        <listitem>
          <para>Set’s <literal>isSubsetOf()</literal> method is gone. Instead,
          use the Set <literal>containsAll()</literal> method. You can convert
          any Iterable to a Set using <literal>toSet()</literal>.</para>
        </listitem>

        <listitem>
          <para>The Collection class is gone, so we’ve changed the way we
          talked about sets, lists, and maps in <xref
          linkend="ch03-collections" />, and we talk more about
          Iterable.</para>
        </listitem>

        <listitem>
          <para>The functionality in the former dart:uri library is now in the
          Uri class in dart:core. The top-level functions
          <literal>encodeUri()</literal>,
          <literal>encodeUriComponent()</literal>,
          <literal>decodeUri()</literal>, and
          <literal>decodeUriComponent()</literal> are now static methods in
          Uri named (respectively) <literal>encodeFull()</literal>,
          <literal>encodeComponent()</literal>,
          <literal>decodeFull()</literal>, and
          <literal>decodeComponent()</literal>. To create a Uri from a string,
          you now use the static <literal>parse()</literal> method. Uri now
          has a single constructor, which takes the arguments that the
          <literal>Uri.fromComponents()</literal> constructor used to take.
          Finally, the <literal>domain</literal> field is now named
          <literal>host</literal>.</para>
        </listitem>

        <listitem>
          <para>The @deprecated, @override, and @proxy annotations moved from
          the meta package to dart:core.</para>
        </listitem>
      </itemizedlist>

      <para>In dart:io:</para>

      <itemizedlist>
        <listitem>
          <para>File’s <literal>openWrite()</literal> method now has no
          required parameters but two optional named parameters. The
          <literal>mode</literal> parameter has a default value of
          <literal>FileMode.WRITE</literal>.</para>
        </listitem>

        <listitem>
          <para>File’s <literal>readAsString()</literal> and
          <literal>readAsLines()</literal> methods no longer require a
          parameter. Instead, they have an optional named parameter
          (<literal>encoding</literal>), with a default value of
          <literal>Encoding.UTF_8</literal>.</para>
        </listitem>

        <listitem>
          <para>IOSink’s methods for writing data have changed. To write
          string data, instead of <literal>addString()</literal> use
          <literal>write()</literal>. The method for writing binary data was
          temporarily renamed to <literal>writeBytes()</literal>, but reverted
          back to <literal>add()</literal>.</para>
        </listitem>
      </itemizedlist>

      <para>A new dart:convert library replaces dart:json and dart:uri:</para>

      <itemizedlist>
        <listitem>
          <para>Instead of a StringDecoder, use
          <literal>UTF8.decoder</literal> to convert UTF-8 characters into a
          Dart string.</para>
        </listitem>

        <listitem>
          <para>Instead of a LineTransformer, use a LineSplitter object to
          split a stream of strings into a stream of individual lines.</para>
        </listitem>

        <listitem>
          <para>Where you used to use dart:json's top-level
          <literal>parse()</literal> and <literal>stringify()</literal>
          functions, use <literal>JSON.decode()</literal> and
          <literal>JSON.encode()</literal>, respectively.</para>
        </listitem>

        <listitem>
          <para>Where you used to use dart:uri's top-level
          <literal>decodeUri()</literal> and <literal>encodeUri()</literal>
          functions, use <literal>UTF8.decode()</literal> and
          <literal>UTF8.encode()</literal>, respectively.</para>
        </listitem>
      </itemizedlist>

      <para>Other API changes include:</para>

      <itemizedlist>
        <listitem>
          <para>In dart:html, the <literal>query()</literal> and
          <literal>queryAll()</literal> methods changed to
          <literal>querySelector()</literal> and
          <literal>querySelectorAll()</literal>, respectively.</para>
        </listitem>

        <listitem>
          <para>The dart:crypto library moved out of the SDK (to <ulink
          url="http://pub.dartlang.org/packages/crypto">http://pub.dartlang.org/packages/crypto</ulink>).</para>
        </listitem>

        <listitem>
          <para>The AsyncError class was removed (from dart:async).</para>
        </listitem>

        <listitem>
          <para>The dart:isolate library was refactored to have only core
          primitives. We removed its coverage from the book but expect higher
          level APIs to come along that make using isolates easier.</para>
        </listitem>

        <listitem>
          <para>The main() function now takes an optional argument
          (List&lt;String&gt;).</para>
        </listitem>
      </itemizedlist>

      <para>The sections that talk about tools have changed, too:</para>

      <itemizedlist>
        <listitem>
          <para>The dart_analyzer tool has been replaced by
          dartanalyzer.</para>
        </listitem>

        <listitem>
          <para>Command-line arguments for many tools have changed. For
          example, the dartdoc <literal>--pkg</literal> command-line option
          changed to <literal>--package-root</literal>.</para>
        </listitem>

        <listitem>
          <para>The pub tool now has build and serve commands, which work with
          transformers to convert your source files into their final
          format.</para>
        </listitem>

        <listitem>
          <para>We fleshed out the dart2js docs.</para>
        </listitem>
      </itemizedlist>

      <para>We also added new coverage of previously undocumented features and
      tweaked existing coverage. In the language tour:</para>

      <itemizedlist>
        <listitem>
          <para>Added <xref linkend="ch02-mixins" />.</para>
        </listitem>

        <listitem>
          <para>In <xref linkend="ch02-keywords" />, marked which keywords are
          built-in identifiers and discussed how they differ from reserved
          words.</para>
        </listitem>

        <listitem>
          <para>Added coverage of the + operator for strings.</para>
        </listitem>

        <listitem>
          <para>Discussed using expressions (such as function calls) as
          arguments to a non-default constructor.</para>
        </listitem>

        <listitem>
          <para>Added examples of using the @override and @proxy
          annotations.</para>
        </listitem>

        <listitem>
          <para>Changed the doc comment example to match the latest
          guidelines, and pointed to <ulink
          url="https://www.dartlang.org/articles/doc-comment-guidelines/">Guidelines
          for Dart Doc Comments.</ulink></para>
        </listitem>
      </itemizedlist>

      <para>In the library tour:</para>

      <itemizedlist>
        <listitem>
          <para>Added <xref linkend="ch03-mirrors" />.</para>
        </listitem>

        <listitem>
          <para>Added examples of parsing non-decimal numbers.</para>
        </listitem>

        <listitem>
          <para>Removed the incorrect <literal>new</literal> from the example
          of using Future.wait().</para>
        </listitem>

        <listitem>
          <para>Removed coverage of Completer, which is no longer
          recommended.</para>
        </listitem>

        <listitem>
          <para>Added <xref linkend="ch03-streams" />.</para>
        </listitem>
      </itemizedlist>

      <para>Throughout the book, we updated links to related topics.</para>
    </sect2>

    <sect2 id="preface-updates-v2">
      <title>Changes in the Second Printing: March 29, 2013</title>

      <para>We’ve updated the content to reflect the following changes since
      the first printing:</para>

      <itemizedlist>
        <listitem>
          <para>Using <literal>part of</literal> in additional library files
          is now <emphasis>required</emphasis>, not optional.</para>
        </listitem>

        <listitem>
          <para>In M2, several APIs changed:</para>

          <itemizedlist>
            <listitem>
              <para>In the dart:html library, the <literal>elements</literal>
              property of Element changed to
              <literal>children</literal>.</para>
            </listitem>

            <listitem>
              <para>Names in dart:html changed to conform to Dart naming
              standards. In particular, <literal>innerHTML</literal> became
              <literal>innerHtml</literal>.</para>
            </listitem>

            <listitem>
              <para>The <literal>charCodes()</literal> method of String became
              a getter, so we removed the parentheses from all references to
              <literal>charCodes</literal>.</para>
            </listitem>

            <listitem>
              <para>The <literal>readAsText()</literal> method of File became
              <literal>readAsString()</literal>.</para>
            </listitem>

            <listitem>
              <para>Constructors for the Date class changed.</para>
            </listitem>

            <listitem>
              <para>NullPointerException no longer exists.</para>
            </listitem>

            <listitem>
              <para>RegExp no longer has a const constructor.</para>
            </listitem>

            <listitem>
              <para>The return type of StringBuffer’s <literal>add()</literal>
              method changed to void. Code that used to chain calls to
              <literal>add()</literal> should now use method cascades
              instead.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>The recommended way for web apps to use
          <literal>dart.js</literal> is now to have a local copy, preferably
          one downloaded using the <literal>browser</literal> pub
          package.</para>
        </listitem>

        <listitem>
          <para>Metadata support was added to the language. See <xref
          linkend="ch02-metadata" />.</para>
        </listitem>

        <listitem>
          <para>We added references to the <ulink
          url="http://www.dartlang.org/articles/web-ui/">Web UI
          package</ulink>, which provides a higher level, scalable approach to
          creating UIs for web apps.</para>
        </listitem>

        <listitem>
          <para>In M3, mixins were added to the language, enabling code re-use
          between classes.</para>
        </listitem>

        <listitem>
          <para>The core libraries were greatly revised in M3 or shortly
          afterward. Changes include:</para>

          <itemizedlist>
            <listitem>
              <para>Some methods changed to fields or getters. This meant we
              had to remove the <literal>()</literal> after
              <literal>hashCode</literal>, <literal>isEmpty</literal>, and
              <literal>isNan</literal>. We also changed
              <literal>getKeys()</literal> to <literal>keys</literal>, and
              <literal>getValues()</literal> to
              <literal>values</literal>.</para>
            </listitem>

            <listitem>
              <para>The Iterable class was beefed up, affecting all
              Collections such as Lists and Sets. The former Collection
              methods <literal>filter()</literal> and <literal>map()</literal>
              moved to Iterable, and the name of <literal>filter()</literal>
              changed to <literal>where()</literal>. (<literal>map()</literal>
              was briefly renamed to <literal>mappedBy()</literal>, but due to
              public feedback that decision was reversed.) The
              <literal>some()</literal> method changed to
              <literal>any()</literal>. Many values returned by Iterables are
              now lazily-filled Iterables; you can use
              <literal>toList()</literal> or <literal>toSet()</literal> to
              force evaluation. We recommend <emphasis>extending</emphasis>
              Iterable rather than just implementing it, so you can take
              advantage of added functionality. More details are in the
              article <ulink
              url="http://www.dartlang.org/articles/m3-whats-new/iterables.html">Iterables.</ulink></para>
            </listitem>

            <listitem>
              <para>The Iterator interface changed from
              <literal>next()</literal> and <literal>hasNext()</literal> to
              <literal>current</literal> and
              <literal>moveNext()</literal>.</para>
            </listitem>

            <listitem>
              <para>The dart:json library no longer has a JSON class. Former
              JSON static methods such as <literal>parse()</literal> and
              <literal>stringify()</literal> are now top-level
              functions.</para>
            </listitem>

            <listitem>
              <para>Date is now named DateTime, and the
              <literal>fromString()</literal> constructor is now a static
              method named <literal>parse()</literal>.</para>
            </listitem>

            <listitem>
              <para>Event-handler registration used to be
              <literal>.on.<replaceable>event</replaceable>.add()</literal>;
              now it’s
              <literal>.on<replaceable>Event</replaceable>.</literal><literal
              role="keep-together">listen</literal>.</para>
            </listitem>

            <listitem>
              <para>The dart:html HttpRequest <literal>get()</literal> method
              was replaced by <literal>getString()</literal> and
              <literal>request()</literal>, which return Future&lt;String&gt;
              and Future&lt;HttpRequest&gt;, respectively.</para>
            </listitem>

            <listitem>
              <para>The dart:html Window <literal>setTimeout()</literal>
              method is gone; instead, use <literal>Future.delayed()</literal>
              or, if you know what you’re doing, a Timer.</para>
            </listitem>

            <listitem>
              <para>Timer and Completer moved from dart:isolate to a new
              library called dart:async. The Timer constructors now take a
              Duration instead of an int.</para>
            </listitem>

            <listitem>
              <para>The Future <literal>chain()</literal> and
              <literal>handleException()</literal> methods are gone, replaced
              by <literal>then()</literal> and
              <literal>catchError()</literal>.</para>
            </listitem>

            <listitem>
              <para>The String <literal>splitChars()</literal> method is gone;
              instead, use <literal>split()</literal> with an empty string
              argument. String’s <literal>charCodes</literal> getter and
              <literal>charCodeAt()</literal> method are gone; to get UTF-16
              code units, use String’s <literal>codeUnits</literal> or
              <literal>codeUnitAt()</literal> instead.</para>
            </listitem>

            <listitem>
              <para>The StringBuffer <literal>add()</literal> and
              <literal>addAll()</literal> methods were replaced by
              <literal>write()</literal> and <literal>writeAll()</literal>,
              respectively.</para>
            </listitem>

            <listitem>
              <para>The dart:io library changed significantly after M3, as did
              all I/O in Dart. I/O now centers around the dart:async library’s
              Stream and Future classes, instead of callbacks. The InputStream
              and OutputStream classes were replaced with classes implementing
              <ulink
              url="http://api.dartlang.org/docs/releases/latest/dart_async/Stream.html">Stream</ulink>
              and <ulink
              url="http://api.dartlang.org/dart_io/IOSink.html">IOSink.</ulink>
              A new <ulink
              url="http://api.dartlang.org/dart_io/FileSystemEntity.html">FileSystemEntity</ulink>
              class is the superclass of File and Directory. To create a new
              HttpServer, you now use the static <literal>bind()</literal>
              method. For more information, see the <ulink
              url="http://news.dartlang.org/2013/02/io-library-now-uses-streams.html">announcement.</ulink></para>
            </listitem>

            <listitem>
              <para>The most used dart:crypto methods for hashes changed from
              <literal>update()</literal> and <literal>digest()</literal> to
              <literal>add()</literal> and <literal>close()</literal>.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>We corrected or clarified some text, such as:</para>

      <itemizedlist>
        <listitem>
          <para>Bitwise operators are implemented in <emphasis
          role="bold">int</emphasis>, not num.</para>
        </listitem>

        <listitem>
          <para>The <literal>is</literal> and <literal>as</literal> examples
          (in <xref linkend="ch02-op-type-test" />) aren’t completely
          equivalent.</para>
        </listitem>
      </itemizedlist>

      <para>We also added sections for some pre-existing features:</para>

      <itemizedlist>
        <listitem>
          <para>Keywords (see <xref linkend="ch02-keywords" />)</para>
        </listitem>

        <listitem>
          <para>Lexical scope (see <xref
          linkend="ch02-lexical-scope" />)</para>
        </listitem>

        <listitem>
          <para>Function equality (see <xref
          linkend="ch02-function-equality" />)</para>
        </listitem>

        <listitem>
          <para>The dart_analyzer tool (see <xref
          linkend="ch04-tools-dart_analyzer" />)</para>
        </listitem>

        <listitem>
          <para>The dartdoc tool (see <xref
          linkend="ch04-tools-dartdoc" />)</para>
        </listitem>
      </itemizedlist>

      <para>Finally, <xref linkend="BrowserChart" /> now uses a more recent
      benchmark and has the latest numbers.</para>
    </sect2>
  </sect1>

  <sect1 id="preface-acknowledgments">
    <title>Acknowledgments</title>

    <para>We’d like to thank the many people who contributed to this book. We
    hope we haven’t forgotten anyone, but we probably have.</para>

    <para>The following Dart engineers and managers gave us prompt, helpful
    reviews and information for the sections corresponding to their areas of
    responsibility: Mads Ager, Peter von der Ahé, Justin Fagnani, Dan Grove,
    Florian Loitsch, Sam McCall, Vijay Menon, John Messerly, Anton Muhin,
    Lasse R.H. Nielsen, Bob Nystrom, Ivan Posva, Jaime Wren, Matthias Hausner,
    Keerti Parthasarathy, and Konstantin Scheglov.</para>

    <para>We’d especially like to thank the people who reviewed even bigger
    swaths of the book or contributed in other, large ways:</para>

    <itemizedlist>
      <listitem>
        <para>JJ Behrens, whose careful look at the first draft of the book
        helped us catch errors and inconsistencies, as well as rework Chapter
        5 to be more interesting, and less of a laundry list. He also created
        a system for testing our samples.</para>
      </listitem>

      <listitem>
        <para>Shailen Tuli, who helped test our examples although he didn’t
        even work for Google.</para>
      </listitem>

      <listitem>
        <para>Mary Campione, whose stream-of-consciousness review of the
        entire book, performed while she was first learning the language,
        helped us find and fix many confusing spots, as well as some errors.
        Later she reviewed and updated our samples, and she implemented
        continuous build testing for our samples on drone.io.</para>
      </listitem>

      <listitem>
        <para>Phil Quitslund, who did a big-picture review of the book and
        gave us guidance and encouragement.</para>
      </listitem>

      <listitem>
        <para>Kasper Lund, whose review caught issues that only someone with
        his expert, comprehensive knowledge of the Dart language and libraries
        could have found.</para>
      </listitem>

      <listitem>
        <para>Gilad Bracha, the language spec writer whose reviews of the
        language chapter were invaluable for getting language details right.
        We couldn’t cover everything, so we look forward to his future work on
        making all the corners of the language understandable to all Dart
        programmers.</para>
      </listitem>
    </itemizedlist>

    <para>Other Googlers helped, as well. Vivian Li, the head of Chrome
    Developer Relations, supported our work on this book. Andres Ferrate, the
    Google Press liaison to O’Reilly, helped simplify the process of getting
    the book published. Myisha Harris gave us excellent legal advice.</para>

    <para>The people at O’Reilly were extremely helpful. Meghan Blanchette,
    our editor, kept everything going smoothly, monitoring our progress in the
    nicest possible way. Christopher Hearse and Marisa LaFleur checked our
    work and helped us make some last-minute fixes that improved the final
    result. We’d also like to thank the good people who manage the author
    workflow and make working on an O’Reilly book such a pleasure. We
    personally worked with Sarah Schneider, Jessica Hosman, and Rachel
    James.</para>

    <para>Finally, we thank Lars Bak and Kasper Lund for writing the foreword,
    and most of all for creating Dart.</para>
  </sect1>
</preface>
