<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<preface id="preface">
  <?dbhtml stop-chunking?>

  <title>Вступление</title>

  <para>Вам не нужно быть экспертом в веб-разработке для создания веб-приложений. С помощью Dart, вы можете с успехом, создавать высокопроизводительные, современные веб-приложения.</para>

  <para>Цель этой книги, обеспечить наилучшее введение в основы языка Dart, его библиотек и инструментов. Эта книга не большая т.к. Dart новый язык. На сайте Dart <ulink
  url="http://dartlang.org"></ulink> можно найти информацию о деталях и обновлениях. Для получения последних новостей, подписывайтесь на <ulink
  url="http://google.com/+dartlang">страницу Dart</ulink> в Google+.</para>

  <para>Another important website is this book’s <ulink
  url="https://github.com/dart-lang/dart-up-and-running-book">GitHub
  project.</ulink> The text for this work is available there under the <ulink
  url="http://creativecommons.org/licenses/by-nc-nd/3.0/us/">Creative Commons
  Attribution-Noncommercial-No Derivative Works 3.0 United States
  License.</ulink> Source code files for this book’s samples are also there,
  in the <ulink
  url="https://github.com/dart-lang/dart-up-and-running-book/tree/master/code"><literal>code/</literal>
  subdirectory.</ulink> Downloading the sample code from GitHub is much easier
  than copying it from the book.</para>

  <para>Если Вы обнаружили ошибку в коде или тексте, пожалуйста <ulink
  url="https://github.com/dart-lang/dart-up-and-running-book/issues/new">create
  an issue.</ulink></para>

  <sect1 id="preface-conventions">
    <title>Соглашения, используемые в этой книге</title>

    <para>Следующие условные обозначения используемые в этой
     книге:</para>

    <variablelist>
      <varlistentry>
        <term><emphasis>Italic</emphasis></term>

        <listitem>
          <para>Indicates new terms, URLs, email addresses, filenames, and
          file extensions.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal moreinfo="none">Constant width</literal></term>

        <listitem>
          <para>Used for program listings, as well as within paragraphs to
          refer to program elements such as variable or function names,
          databases, data types, environment variables, statements, and
          keywords.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><userinput moreinfo="none">Constant width
        bold</userinput></term>

        <listitem>
          <para>Shows commands or other text that should be typed literally by
          the user.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>Constant width italic</replaceable></term>

        <listitem>
          <para>Shows text that should be replaced with user-supplied values
          or by values determined by context.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <note>
      <para>This icon signifies a tip, suggestion, or general note.</para>
    </note>

    <caution>
      <para>This icon indicates a warning or caution.</para>
    </caution>
  </sect1>

  <sect1 id="preface-examples">
    <title>Using Code Examples</title>

    <para>Supplemental material (code examples, exercises, etc.) is available
    for download at <ulink role="orm:hideurl"
    url="https://github.com/oreillymedia/dart_up_and_running"><emphasis>https://github.com/oreillymedia/dart_up_and_running</emphasis></ulink>.</para>

    <para>This book is here to help you get your job done. In general, if
    example code is offered with this book, you may use it in your programs
    and documentation. You do not need to contact us for permission unless
    you’re reproducing a significant portion of the code. For example, writing
    a program that uses several chunks of code from this book does not require
    permission. Selling or distributing a CD-ROM of examples from O’Reilly
    books does require permission. Answering a question by citing this book
    and quoting example code does not require permission. Incorporating a
    significiant amount of example code from this book into your product’s
    documentation does require permission.</para>

    <para>We appreciate, but do not require, attribution. An attribution
    usually includes the <phrase role="keep-together">title, author,</phrase>
    publisher, and ISBN. For example: “<emphasis>Dart: Up and
    Running</emphasis> by Kathy <phrase role="keep-together">Walrath
    and</phrase> Seth Ladd (O’Reilly). Copyright 2014 Kathy Walrath and Seth
    Ladd, 978-1-449-33089-7.”</para>

    <para>If you feel your use of code examples falls outside fair use or the
    permission given above, feel free to contact us at
    <email>permissions@oreilly.com</email>.</para>
  </sect1>

  <sect1 id="preface-safari">
    <title>Safari® Books Online</title>

    <note role="safarienabled">
      <para>Safari Books Online (<ulink role="orm:hideurl:ital"
      url="http://my.safaribooksonline.com/?portal=oreilly">www.safaribooksonline.com</ulink>)
      is an on-demand digital library that delivers expert <ulink
      role="orm:hideurl"
      url="http://www.safaribooksonline.com/content">content</ulink> in both
      book and video form from the world’s leading authors in technology and
      business.</para>
    </note>

    <para>Technology professionals, software developers, web designers, and
    business and creative professionals use Safari Books Online as their
    primary resource for research, problem solving, learning, and
    certification training.</para>

    <para>Safari Books Online offers a range of <ulink role="orm:hideurl"
    url="http://www.safaribooksonline.com/subscriptions">product mixes</ulink>
    and pricing programs for <ulink role="orm:hideurl"
    url="http://www.safaribooksonline.com/organizations-teams">organizations</ulink>,
    <ulink role="orm:hideurl"
    url="http://www.safaribooksonline.com/government">government
    agencies</ulink>, and <ulink role="orm:hideurl"
    url="http://www.safaribooksonline.com/individuals">individuals</ulink>.
    Subscribers have access to thousands of books, training videos, and
    prepublication manuscripts in one fully searchable database from
    publishers like O’Reilly Media, Prentice Hall Professional, Addison-Wesley
    Professional, Microsoft Press, Sams, Que, Peachpit Press, Focal Press,
    Cisco Press, John Wiley &amp; Sons, Syngress, Morgan Kaufmann, IBM
    Redbooks, Packt, Adobe Press, FT Press, Apress, Manning, New Riders,
    McGraw-Hill, Jones &amp; Bartlett, Course Technology, and dozens <ulink
    role="orm:hideurl"
    url="http://www.safaribooksonline.com/publishers">more</ulink>. For more
    information about Safari Books Online, please visit us <ulink
    role="orm:hideurl"
    url="http://www.safaribooksonline.com/">online</ulink>.</para>
  </sect1>

  <sect1 id="preface-contact">
    <title>How to Contact Us</title>

    <para>Please address comments and questions concerning this book to the
    publisher:</para>

    <simplelist type="vert">
      <member>O’Reilly Media, Inc.</member>

      <member>1005 Gravenstein Highway North</member>

      <member>Sebastopol, CA 95472</member>

      <member>800-998-9938 (in the United States or Canada)</member>

      <member>707-829-0515 (international or local)</member>

      <member>707-829-0104 (fax)</member>
    </simplelist>

    <para>We have a web page for this book, where we list errata, examples,
    and any additional information. You can access this page at <ulink
    url="http://oreil.ly/Dart_Up_and_Running"></ulink>.</para>

    <para>To comment or ask technical questions about this book, send email to
    <email>bookquestions@oreilly.com</email>.</para>

    <para>For more information about our books, courses, conferences, and
    news, see our website at <ulink
    url="http://www.oreilly.com"></ulink>.</para>

    <para>Find us on Facebook: <ulink
    url="http://facebook.com/oreilly"></ulink></para>

    <para>Follow us on Twitter: <ulink
    url="http://twitter.com/oreillymedia"></ulink></para>

    <para>Watch us on YouTube: <ulink
    url="http://www.youtube.com/oreillymedia"></ulink></para>
  </sect1>

  <sect1 id="preface-updates">
    <title>Content Updates</title>

    <para>This section gives details about how the book has changed between
    each of its three printings.</para>

    <sect2 id="preface-updates-v3">
      <title>Changes in the Third Printing: February 19, 2014</title>

      <para>We've changed the text and examples to reflect these language
      changes:</para>

      <itemizedlist>
        <listitem>
          <para>Instance variables can no longer be <literal
          moreinfo="none">const</literal>. Use <literal moreinfo="none">static
          const</literal> variables instead.</para>
        </listitem>

        <listitem>
          <para>The <literal moreinfo="none">?</literal> operator for testing
          whether an optional parameter has been set is no longer in the
          language.</para>
        </listitem>

        <listitem>
          <para>Keys in map literals no longer need to be strings.</para>
        </listitem>

        <listitem>
          <para>Dart now has Symbols and symbol literals (<literal
          moreinfo="none">#<replaceable>identifier</replaceable></literal>):
          <xref linkend="ch02-symbols" />.</para>
        </listitem>

        <listitem>
          <para>Function equality testing is easier: <xref
          linkend="ch02-function-equality" />.</para>
        </listitem>

        <listitem>
          <para>Bitwise operators have higher precedence than they used
          to.</para>
        </listitem>
      </itemizedlist>

      <para>We've also updated the content to reflect API changes. In
      dart:core:</para>

      <itemizedlist>
        <listitem>
          <para>Set’s <literal moreinfo="none">isSubsetOf()</literal> method
          is gone. Instead, use the Set <literal
          moreinfo="none">containsAll()</literal> method. You can convert any
          Iterable to a Set using <literal
          moreinfo="none">toSet()</literal>.</para>
        </listitem>

        <listitem>
          <para>The Collection class is gone, so we’ve changed the way we
          talked about sets, lists, and maps in <xref
          linkend="ch03-collections" />, and we talk more about
          Iterable.</para>
        </listitem>

        <listitem>
          <para>The functionality in the former dart:uri library is now in the
          Uri class in dart:core. The top-level functions <literal
          moreinfo="none">encodeUri()</literal>, <literal
          moreinfo="none">encodeUriComponent()</literal>, <literal
          moreinfo="none">decodeUri()</literal>, and <literal
          moreinfo="none">decodeUriComponent()</literal> are now static
          methods in Uri named (respectively) <literal
          moreinfo="none">encodeFull()</literal>, <literal
          moreinfo="none">encodeComponent()</literal>, <literal
          moreinfo="none">decodeFull()</literal>, and <literal
          moreinfo="none">decodeComponent()</literal>. To create a Uri from a
          string, you now use the static <literal
          moreinfo="none">parse()</literal> method. Uri now has a single
          constructor, which takes the arguments that the <literal
          moreinfo="none">Uri.fromComponents()</literal> constructor used to
          take. Finally, the <literal moreinfo="none">domain</literal> field
          is now named <literal moreinfo="none">host</literal>.</para>
        </listitem>

        <listitem>
          <para>The @deprecated, @override, and @proxy annotations moved from
          the meta package to dart:core.</para>
        </listitem>
      </itemizedlist>

      <para>In dart:io:</para>

      <itemizedlist>
        <listitem>
          <para>File’s <literal moreinfo="none">openWrite()</literal> method
          now has no required parameters but two optional named parameters.
          The <literal moreinfo="none">mode</literal> parameter has a default
          value of <literal moreinfo="none">FileMode.WRITE</literal>.</para>
        </listitem>

        <listitem>
          <para>File’s <literal moreinfo="none">readAsString()</literal> and
          <literal moreinfo="none">readAsLines()</literal> methods no longer
          require a parameter. Instead, they have an optional named parameter
          (<literal moreinfo="none">encoding</literal>), with a default value
          of <literal moreinfo="none">Encoding.UTF_8</literal>.</para>
        </listitem>

        <listitem>
          <para>IOSink’s methods for writing data have changed. To write
          string data, instead of <literal
          moreinfo="none">addString()</literal> use <literal
          moreinfo="none">write()</literal>. The method for writing binary
          data was temporarily renamed to <literal
          moreinfo="none">writeBytes()</literal>, but reverted back to
          <literal moreinfo="none">add()</literal>.</para>
        </listitem>
      </itemizedlist>

      <para>A new dart:convert library replaces dart:json and dart:uri:</para>

      <itemizedlist>
        <listitem>
          <para>Instead of a StringDecoder, use <literal
          moreinfo="none">UTF8.decoder</literal> to convert UTF-8 characters
          into a Dart string.</para>
        </listitem>

        <listitem>
          <para>Instead of a LineTransformer, use a LineSplitter object to
          split a stream of strings into a stream of individual lines.</para>
        </listitem>

        <listitem>
          <para>Where you used to use dart:json's top-level <literal
          moreinfo="none">parse()</literal> and <literal
          moreinfo="none">stringify()</literal> functions, use <literal
          moreinfo="none">JSON.decode()</literal> and <literal
          moreinfo="none">JSON.encode()</literal>, respectively.</para>
        </listitem>

        <listitem>
          <para>Where you used to use dart:uri's top-level <literal
          moreinfo="none">decodeUri()</literal> and <literal
          moreinfo="none">encodeUri()</literal> functions, use <literal
          moreinfo="none">UTF8.decode()</literal> and <literal
          moreinfo="none">UTF8.encode()</literal>, respectively.</para>
        </listitem>
      </itemizedlist>

      <para>Other API changes include:</para>

      <itemizedlist>
        <listitem>
          <para>In dart:html, the <literal moreinfo="none">query()</literal>
          and <literal moreinfo="none">queryAll()</literal> methods changed to
          <literal moreinfo="none">querySelector()</literal> and <literal
          moreinfo="none">querySelectorAll()</literal>, respectively.</para>
        </listitem>

        <listitem>
          <para>The dart:crypto library moved out of the SDK (to <ulink
          url="http://pub.dartlang.org/packages/crypto">http://pub.dartlang.org/packages/crypto</ulink>).</para>
        </listitem>

        <listitem>
          <para>The AsyncError class was removed (from dart:async).</para>
        </listitem>

        <listitem>
          <para>The dart:isolate library was refactored to have only core
          primitives. We removed its coverage from the book but expect higher
          level APIs to come along that make using isolates easier.</para>
        </listitem>

        <listitem>
          <para>The main() function now takes an optional argument
          (List&lt;String&gt;).</para>
        </listitem>
      </itemizedlist>

      <para>The sections that talk about tools have changed, too:</para>

      <itemizedlist>
        <listitem>
          <para>The dart_analyzer tool has been replaced by
          dartanalyzer.</para>
        </listitem>

        <listitem>
          <para>Command-line arguments for many tools have changed.</para>
        </listitem>

        <listitem>
          <para>The pub tool now has build and serve commands, which work with
          transformers to convert your source files into their final
          format.</para>
        </listitem>

        <listitem>
          <para>We fleshed out the dart2js docs.</para>
        </listitem>

        <listitem>
          <para>We removed the dartdoc coverage from the book, since we expect
          the interface to change significantly.</para>
        </listitem>
      </itemizedlist>

      <para>We also added new coverage of previously undocumented features and
      tweaked existing coverage. In the language tour:</para>

      <itemizedlist>
        <listitem>
          <para>Added <xref linkend="ch02-mixins" />.</para>
        </listitem>

        <listitem>
          <para>In <xref linkend="ch02-keywords" />, marked which keywords are
          built-in identifiers and discussed how they differ from reserved
          words.</para>
        </listitem>

        <listitem>
          <para>Added coverage of the + operator for strings.</para>
        </listitem>

        <listitem>
          <para>Discussed using expressions (such as function calls) as
          arguments to a non-default constructor.</para>
        </listitem>

        <listitem>
          <para>Added examples of using the @override and @proxy
          annotations.</para>
        </listitem>

        <listitem>
          <para>Changed the doc comment example to match the latest
          guidelines, and pointed to <ulink
          url="https://www.dartlang.org/articles/doc-comment-guidelines/">Guidelines
          for Dart Doc Comments.</ulink></para>
        </listitem>
      </itemizedlist>

      <para>In the library tour:</para>

      <itemizedlist>
        <listitem>
          <para>Added <xref linkend="ch03-mirrors" />.</para>
        </listitem>

        <listitem>
          <para>Added examples of parsing non-decimal numbers.</para>
        </listitem>

        <listitem>
          <para>Removed the incorrect <literal moreinfo="none">new</literal>
          from the example of using Future.wait().</para>
        </listitem>

        <listitem>
          <para>Removed coverage of Completer, which is no longer
          recommended.</para>
        </listitem>

        <listitem>
          <para>Added <xref linkend="ch03-streams" />.</para>
        </listitem>
      </itemizedlist>

      <para>Throughout the book, we updated links to related topics.</para>

      <para>Finally, we completely rewrote <xref linkend="ch05" /> to feature
      a new example (Dartiverse Search).</para>
    </sect2>

    <sect2 id="preface-updates-v2">
      <title>Changes in the Second Printing: March 29, 2013</title>

      <para>We’ve updated the content to reflect the following changes since
      the first printing:</para>

      <itemizedlist>
        <listitem>
          <para>Using <literal>part of</literal> in additional library files
          is now <emphasis>required</emphasis>, not optional.</para>
        </listitem>

        <listitem>
          <para>In M2, several APIs changed:</para>

          <itemizedlist>
            <listitem>
              <para>In the dart:html library, the <literal>elements</literal>
              property of Element changed to
              <literal>children</literal>.</para>
            </listitem>

            <listitem>
              <para>Names in dart:html changed to conform to Dart naming
              standards. In particular, <literal>innerHTML</literal> became
              <literal>innerHtml</literal>.</para>
            </listitem>

            <listitem>
              <para>The <literal>charCodes()</literal> method of String became
              a getter, so we removed the parentheses from all references to
              <literal>charCodes</literal>.</para>
            </listitem>

            <listitem>
              <para>The <literal>readAsText()</literal> method of File became
              <literal>readAsString()</literal>.</para>
            </listitem>

            <listitem>
              <para>Constructors for the Date class changed.</para>
            </listitem>

            <listitem>
              <para>NullPointerException no longer exists.</para>
            </listitem>

            <listitem>
              <para>RegExp no longer has a const constructor.</para>
            </listitem>

            <listitem>
              <para>The return type of StringBuffer’s <literal>add()</literal>
              method changed to void. Code that used to chain calls to
              <literal>add()</literal> should now use method cascades
              instead.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>The recommended way for web apps to use
          <literal>dart.js</literal> is now to have a local copy, preferably
          one downloaded using the <literal>browser</literal> pub
          package.</para>
        </listitem>

        <listitem>
          <para>Metadata support was added to the language. See <xref
          linkend="ch02-metadata" />.</para>
        </listitem>

        <listitem>
          <para>We added references to the <ulink
          url="http://www.dartlang.org/articles/web-ui/">Web UI
          package</ulink>, which provides a higher level, scalable approach to
          creating UIs for web apps.</para>
        </listitem>

        <listitem>
          <para>In M3, mixins were added to the language, enabling code re-use
          between classes.</para>
        </listitem>

        <listitem>
          <para>The core libraries were greatly revised in M3 or shortly
          afterward. Changes include:</para>

          <itemizedlist>
            <listitem>
              <para>Some methods changed to fields or getters. This meant we
              had to remove the <literal>()</literal> after
              <literal>hashCode</literal>, <literal>isEmpty</literal>, and
              <literal>isNan</literal>. We also changed
              <literal>getKeys()</literal> to <literal>keys</literal>, and
              <literal>getValues()</literal> to
              <literal>values</literal>.</para>
            </listitem>

            <listitem>
              <para>The Iterable class was beefed up, affecting all
              Collections such as Lists and Sets. The former Collection
              methods <literal>filter()</literal> and <literal>map()</literal>
              moved to Iterable, and the name of <literal>filter()</literal>
              changed to <literal>where()</literal>. (<literal>map()</literal>
              was briefly renamed to <literal>mappedBy()</literal>, but due to
              public feedback that decision was reversed.) The
              <literal>some()</literal> method changed to
              <literal>any()</literal>. Many values returned by Iterables are
              now lazily-filled Iterables; you can use
              <literal>toList()</literal> or <literal>toSet()</literal> to
              force evaluation. We recommend <emphasis>extending</emphasis>
              Iterable rather than just implementing it, so you can take
              advantage of added functionality. More details are in the
              article <ulink
              url="http://www.dartlang.org/articles/m3-whats-new/iterables.html">Iterables.</ulink></para>
            </listitem>

            <listitem>
              <para>The Iterator interface changed from
              <literal>next()</literal> and <literal>hasNext()</literal> to
              <literal>current</literal> and
              <literal>moveNext()</literal>.</para>
            </listitem>

            <listitem>
              <para>The dart:json library no longer has a JSON class. Former
              JSON static methods such as <literal>parse()</literal> and
              <literal>stringify()</literal> are now top-level
              functions.</para>
            </listitem>

            <listitem>
              <para>Date is now named DateTime, and the
              <literal>fromString()</literal> constructor is now a static
              method named <literal>parse()</literal>.</para>
            </listitem>

            <listitem>
              <para>Event-handler registration used to be
              <literal>.on.<replaceable>event</replaceable>.add()</literal>;
              now it’s
              <literal>.on<replaceable>Event</replaceable>.</literal><literal
              role="keep-together">listen</literal>.</para>
            </listitem>

            <listitem>
              <para>The dart:html HttpRequest <literal>get()</literal> method
              was replaced by <literal>getString()</literal> and
              <literal>request()</literal>, which return Future&lt;String&gt;
              and Future&lt;HttpRequest&gt;, respectively.</para>
            </listitem>

            <listitem>
              <para>The dart:html Window <literal>setTimeout()</literal>
              method is gone; instead, use <literal>Future.delayed()</literal>
              or, if you know what you’re doing, a Timer.</para>
            </listitem>

            <listitem>
              <para>Timer and Completer moved from dart:isolate to a new
              library called dart:async. The Timer constructors now take a
              Duration instead of an int.</para>
            </listitem>

            <listitem>
              <para>The Future <literal>chain()</literal> and
              <literal>handleException()</literal> methods are gone, replaced
              by <literal>then()</literal> and
              <literal>catchError()</literal>.</para>
            </listitem>

            <listitem>
              <para>The String <literal>splitChars()</literal> method is gone;
              instead, use <literal>split()</literal> with an empty string
              argument. String’s <literal>charCodes</literal> getter and
              <literal>charCodeAt()</literal> method are gone; to get UTF-16
              code units, use String’s <literal>codeUnits</literal> or
              <literal>codeUnitAt()</literal> instead.</para>
            </listitem>

            <listitem>
              <para>The StringBuffer <literal>add()</literal> and
              <literal>addAll()</literal> methods were replaced by
              <literal>write()</literal> and <literal>writeAll()</literal>,
              respectively.</para>
            </listitem>

            <listitem>
              <para>The dart:io library changed significantly after M3, as did
              all I/O in Dart. I/O now centers around the dart:async library’s
              Stream and Future classes, instead of callbacks. The InputStream
              and OutputStream classes were replaced with classes implementing
              <ulink
              url="http://api.dartlang.org/docs/releases/latest/dart_async/Stream.html">Stream</ulink>
              and <ulink
              url="http://api.dartlang.org/dart_io/IOSink.html">IOSink.</ulink>
              A new <ulink
              url="http://api.dartlang.org/dart_io/FileSystemEntity.html">FileSystemEntity</ulink>
              class is the superclass of File and Directory. To create a new
              HttpServer, you now use the static <literal>bind()</literal>
              method. For more information, see the <ulink
              url="http://news.dartlang.org/2013/02/io-library-now-uses-streams.html">announcement.</ulink></para>
            </listitem>

            <listitem>
              <para>The most used dart:crypto methods for hashes changed from
              <literal>update()</literal> and <literal>digest()</literal> to
              <literal>add()</literal> and <literal>close()</literal>.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>We corrected or clarified some text, such as:</para>

      <itemizedlist>
        <listitem>
          <para>Bitwise operators are implemented in <emphasis
          role="bold">int</emphasis>, not num.</para>
        </listitem>

        <listitem>
          <para>The <literal>is</literal> and <literal>as</literal> examples
          (in <xref linkend="ch02-op-type-test" />) aren’t completely
          equivalent.</para>
        </listitem>
      </itemizedlist>

      <para>We also added sections for some pre-existing features:</para>

      <itemizedlist>
        <listitem>
          <para>Keywords (see <xref linkend="ch02-keywords" />)</para>
        </listitem>

        <listitem>
          <para>Lexical scope (see <xref
          linkend="ch02-lexical-scope" />)</para>
        </listitem>

        <listitem>
          <para>Function equality (see <xref
          linkend="ch02-function-equality" />)</para>
        </listitem>

        <listitem>
          <para>The dart_analyzer tool (see <xref
          linkend="ch04-tools-dart_analyzer" />)</para>
        </listitem>
      </itemizedlist>

      <para>Finally, <xref linkend="BrowserChart" /> now uses a more recent
      benchmark and has the latest numbers.</para>
    </sect2>
  </sect1>

  <sect1 id="preface-acknowledgments">
    <title>Acknowledgments</title>

    <para>We’d like to thank the many people who contributed to this book. We
    hope we haven’t forgotten anyone, but we probably have.</para>

    <para>The following Dart engineers and managers gave us prompt, helpful
    reviews and information for the sections corresponding to their areas of
    responsibility: Mads Ager, Peter von der Ahé, Justin Fagnani, Emily
    Fortuna, Søren Gjesse, Dan Grove, Matthias Hausner, Florian Loitsch, Ryan
    Macnak, Sam McCall, John McCutchan, Vijay Menon, John Messerly, Anton
    Muhin, Lasse R.H. Nielsen, Bob Nystrom, Keerti Parthasarathy, Ivan Posva,
    Konstantin Scheglov, Brian Wilkerson, and Jaime Wren.</para>

    <para>We’d especially like to thank the people who reviewed even bigger
    swaths of the book or contributed in other, large ways:</para>

    <itemizedlist>
      <listitem>
        <para>JJ Behrens, whose careful look at the first draft of the book
        helped us catch errors and inconsistencies, as well as rework <xref
        linkend="ch05" /> to be more interesting, and less of a laundry list.
        He also created a system for testing our samples.</para>
      </listitem>

      <listitem>
        <para>Shailen Tuli, who helped test our examples although he didn’t
        even work for Google.</para>
      </listitem>

      <listitem>
        <para>Mary Campione, whose stream-of-consciousness review of the
        entire book, performed while she was first learning the language,
        helped us find and fix many <phrase
        role="keep-together">confusing</phrase> spots, as well as some errors.
        Later she reviewed and updated our samples, and she implemented
        continuous build testing for our samples on drone.io.</para>
      </listitem>

      <listitem>
        <para>Phil Quitslund, who did a big-picture review of the book and
        gave us guidance and encouragement.</para>
      </listitem>

      <listitem>
        <para>Kasper Lund, whose review caught issues that only someone with
        his expert, comprehensive knowledge of the Dart language and libraries
        could have found.</para>
      </listitem>

      <listitem>
        <para>Gilad Bracha, the language spec writer whose reviews of the
        language chapter were invaluable for getting language details right.
        We couldn’t cover everything, so we look forward to his future work on
        making all the corners of the language understandable to all Dart
        programmers.</para>
      </listitem>

      <listitem>
        <para>Anders Johnsen, who wrote the Dartiverse Search app and reviewed
        <xref linkend="ch05" />’s walkthrough of that app.</para>
      </listitem>
    </itemizedlist>

    <para>Other Googlers helped, as well. Vivian Cromwell, the head of Chrome
    Developer Relations, supported our work on this book. Andres Ferrate, the
    Google Press liaison to O’Reilly, helped simplify the process of getting
    the book published. Myisha Harris gave us excellent legal advice.</para>

    <para>The people at O’Reilly were extremely helpful. Meghan Blanchette,
    our editor, kept everything going smoothly, monitoring our progress in the
    nicest possible way. Christopher Hearse, Marisa LaFleur, and Melanie
    Yarbrough checked our work and helped us make some last-minute fixes that
    improved the final result. We’d also like to thank the good people who
    manage the author workflow and make working on an O’Reilly book such a
    pleasure. We personally worked with Sarah Schneider, Jessica Hosman, and
    Rachel James.</para>

    <para>Finally, we thank Lars Bak and Kasper Lund for writing the foreword,
    and most of all for creating Dart.</para>
  </sect1>
</preface>
