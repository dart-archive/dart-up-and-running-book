<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="ch05">
  <?dbhtml stop-chunking?>

  <title>Walkthrough: Dart Chat</title>

  <para>This chapter points out some of the useful and fun features of Dart
  that we used to build Dart Chat, a client-server app. If you’d like
  step-by-step instructions on building Dart Chat, you might be interested in
  our <ulink
  url="https://www.dartlang.org/slides/2012/06/io12/Bullseye-Your-first-Dart-app-Codelab-GoogleIO2012.pdf">code
  lab.</ulink></para>

  <para><xref linkend="DartChat-screenshot" /> shows the chat client executing
  in a Dartium window. Each copy of the chat client can send messages to the
  chat server, which forwards those messages to the other chat clients.</para>

  <sect1 id="ch05-how-to-run">
    <title>How to Run Dart Chat</title>

    <para>The easiest way to run the Dart Chat client and server apps is to
    open them in Dart Editor.</para>

    <orderedlist continuation="restarts" inheritnum="ignore">
      <listitem>
        <para>Download the <ulink
        url="https://github.com/dart-lang/io-2012-dart-code-lab">Dart Chat
        source</ulink> code from GitHub.</para>
      </listitem>

      <listitem>
        <para>In Dart Editor, use <emphasis role="bold">File &gt; Open
        Folder...</emphasis>, to open the <emphasis
        role="bold">finished</emphasis> directory of the Dart Chat source
        code.</para>
      </listitem>

      <listitem>
        <para>Select <literal moreinfo="none">chat-server.dart</literal>, and
        then click the Run button <inlinemediaobject>
            <imageobject>
              <imagedata fileref="figs/web/run.png" width="0.12in" />
            </imageobject>
          </inlinemediaobject>. A view named chat-server appears in Dart
        Editor, displaying debugging output for the server.</para>
      </listitem>

      <listitem>
        <para>Select <literal
        moreinfo="none">client/chat-client.dart</literal>, and then click the
        Run button <inlinemediaobject>
            <imageobject>
              <imagedata fileref="figs/web/run.png" width="0.12in" />
            </imageobject>
          </inlinemediaobject>. Dartium launches, if necessary, and displays a
        Dart Chat tab.</para>
      </listitem>

      <listitem>
        <para>To create another copy of the chat client, go to the Dart Chat
        tab in Dartium. Right-click the tab, and choose <emphasis
        role="bold">Duplicate</emphasis>.</para>
      </listitem>
    </orderedlist>

    <figure float="none" id="DartChat-screenshot">
      <title>Multiple chat clients can use the chat server to talk</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/daur_0501.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>

  <sect1 id="ch05-how-it-works">
    <title>How Dart Chat Works</title>

    <para>The chat server and client are simple. The chat server is an HTTP
    server that provides a WebSocket. The chat client uses that WebSocket for
    a bi-directional communication channel with the server. The client sends
    chat messages to the server over the WebSocket, and the server relays
    those messages to all other connected clients.</para>

    <para>As <xref linkend="web-socket-connections" /> shows, the server
    starts things off by listening for requests to <literal
    moreinfo="none">ws://127.0.0.1:1337/ws</literal>. Chat clients then
    connect to that URL.</para>

    <figure float="0" id="web-socket-connections">
      <title>Chat clients connect to a web socket created by the chat
      server</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/daur_0502.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The real communication between client and server happens when the
    user enters a message. As <xref linkend="web-socket-messages" /> shows,
    the chat client sends a JSON-encoded version of the message to the server.
    The server then forwards the message to every client except the one that
    sent it.</para>

    <figure float="0" id="web-socket-messages">
      <title>A chat client uses the server to send a message to other chat
      clients</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/daur_0503.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The chat server implements an HTTP server to listen for WebSocket
    requests. The HTTP server can also serve static files from the client
    directory—for example, http://127.0.0.1:1337/chat-log.txt shows the file
    that’s at client/chat-log.txt.</para>

    <para>The client code is split between HTML (page structure), CSS (page
    look), and JavaScript (logic and behavior). That’s typical of web
    clients.</para>

    <para>The twist is that this client’s JavaScript code is produced from
    Dart code, thanks to the dart2js compiler. Any modern browser can run this
    JavaScript code. Dartium (and any other browsers that support Dart) can
    run either the JavaScript code or the original Dart code.</para>
  </sect1>

  <sect1 id="ch05-client-html-code">
    <title>The Client’s HTML Code</title>

    <para>The main elements in the client UI are two text fields (with the IDs
    “chat-username” and “chat-message”) and a status area (ID:
    “chat-display”).</para>

    <programlisting format="linespecific"><remark>lang-html
</remark>&lt;!-- In client/index.html: --&gt;
&lt;textarea id="chat-display" rows="10" disabled&gt;&lt;/textarea&gt;
...
&lt;input id="chat-username" name="chat-username" type="text"&gt;
...
&lt;input id="chat-message" name="chat-message" type="text" disabled 
    value="enter message..."&gt;</programlisting>

    <para>Near the bottom of client/index.html, a couple of &lt;script&gt;
    tags tell the browser to execute the client’s Dart or JavaScript
    code:</para>

    <programlisting format="linespecific"><remark>lang-html
</remark>&lt;script type="application/dart" src="chat-client.dart"&gt;&lt;/script&gt;
&lt;script src="packages/browser/dart.js"&gt;&lt;/script&gt;</programlisting>

    <para>The first line works in browsers that have an embedded Dart VM and
    so can execute Dart code; currently, only Dartium qualifies. The second
    line is important for every other browser. It executes dart.js, which is a
    standard script that converts all Dart &lt;script&gt; tags to use
    foo.dart.js instead of foo.dart, with the assumption that foo.dart.js is a
    JavaScript version of foo.dart. For non-Dartium browsers, dart.js changes
    the first &lt;script&gt; tag to the following:</para>

    <programlisting format="linespecific"><remark>lang-html
</remark>&lt;!-- Inserted by dart.js for non-Dartium browsers --&gt;
&lt;script src="chat-client.dart.js"&gt;&lt;/script&gt;</programlisting>

    <para>The script contents run when the browser has loaded the HTML and
    constructed its DOM (document object model).</para>

    <para>You can get dart.js with the <ulink
    url="http://pub.dartlang.org/packages/browser">browser package from
    pub</ulink>. See <xref linkend="ch04-tools-dart2js" /> for more
    information about compiling Dart code into its JavaScript
    equivalent.</para>
  </sect1>

  <sect1 id="ch05-client-dart-code">
    <title>The Client’s Dart Code</title>

    <para>Dart code (client/chat-client.dart) provides the client’s logic,
    using the DOM to interact with UI elements. For example, the client’s Dart
    code uses the DOM to find the text area where the client displays
    messages.</para>

    <sect2 id="ch05-find-element">
      <title>Finding DOM Elements</title>

      <para>The client app uses dart:html’s top-level
      <literal>query()</literal> method to get the client’s UI elements from
      the DOM.</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>// In client/chat-client.dart:
import 'dart:html';
//...
TextAreaElement chatElem = query('#chat-display');
InputElement usernameElem = query('#chat-username');
InputElement messageElem = query('#chat-message');</programlisting>

      <para>The <literal>query()</literal> method uses a selector string that
      identifies an element in the DOM. See <xref
      linkend="ch03-finding-elements" /> for more about selectors.</para>
    </sect2>

    <sect2 id="ch05-wrap-element">
      <title>Wrapping DOM Elements</title>

      <para>Rather than always dealing with DOM APIs, the chat client wraps
      the elements in Dart objects:</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>new ChatWindow(chatElem);
usernameInput = new UsernameInput(usernameElem);
messageInput = new MessageInput(messageElem);</programlisting>

      <para>ChatWindow, UsernameInput, and MessageInput are custom classes
      that extend another custom class called View. These Views effectively
      separate the DOM manipulation from the application logic.</para>

      <para>Because Dart has real classes and inheritance, it’s simple to
      express the relationship that ChatWindow is-a View. Here’s the complete
      code for UsernameInput:</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>class UsernameInput extends View&lt;InputElement&gt; {
  UsernameInput(InputElement elem) : super(elem);

  bind() { // Called by the View constructor.
    elem.onChange.listen((e) =&gt; _onUsernameChange());
  }

  _onUsernameChange() {
    if (!elem.value.isEmpty) {
      messageInput.enable();
    } else {
      messageInput.disable();
    }
  }

  String get username =&gt; elem.value;
}</programlisting>

      <para>To get the string that’s in the chat-username field, the client
      app uses the <literal moreinfo="none">username</literal> getter of a
      UsernameInput object. For example:</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>chatWindow.displayMessage(message, usernameInput.username);</programlisting>

      <para>Notice how the code uses generics (View&lt;InputElement&gt;) to
      specify what kind of element the View class can encapsulate. In the
      preceding example, the UsernameInput wraps an <ulink
      url="http://api.dartlang.org/dart_html/InputElement.html">InputElement.</ulink>
      Expressing this gives tools information that they can use to identify
      bugs or improve code completion.</para>

      <para>Wrapping elements is a technique you can use as you develop a
      simple app that might evolve into a larger app. As the app grows, you
      might change it to use <ulink
      url="http://www.dartlang.org/articles/dart-web-components/">Web
      UI</ulink>, a library for declarative widgets and dynamic, data-driven
      views.</para>
    </sect2>

    <sect2 id="ch05-update-element">
      <title>Updating DOM Elements</title>

      <para>The <literal>bind()</literal> method sets up the event handlers,
      which bind events from the DOM to logic in the Dart objects. For
      example, in UsernameInput, the <literal>_onUsernameChange()</literal>
      method is called any time the text in the input element changes.</para>

      <para>To display messages in the chat window, the ChatWindow class adds
      the message to the text node of the text area.</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>class ChatWindow extends View&lt;TextAreaElement&gt; {
  ChatWindow(TextAreaElement elem) : super(elem);
  
  displayMessage(String msg, String from) {
    _display('$from: $msg\n');
  }
  
  displayNotice(String notice) {
    _display('[system]: $notice\n');
  }
  
  _display(String str) {
    elem.addText(str);
  }
}</programlisting>

      <para>In both examples, the View objects expose an application-specific
      API—for example, <literal>displayMessage()</literal> or
      <literal>_onUsernameChange()</literal>—and encapsulate the manipulation
      of DOM elements.</para>
    </sect2>

    <sect2 id="ch05-dart-json">
      <title>Encoding and Decoding Messages</title>

      <para>The dart:json library encodes and decodes JSON-formatted messages.
      JSON is an easy way to provide string message data to WebSockets. Using
      JSON also gives a bit of structure to the messages and leaves the door
      open to creating more detailed messages in the future.</para>

      <para>The <literal>stringify()</literal> method converts a Dart object
      to a JSON-encoded string, and the <literal>parse()</literal> method
      converts a JSON string back into a Dart object. Here’s the JSON-related
      code from the chat client:</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>import 'dart:json' as json;

var encoded = json.stringify({'f': from, 'm': message});
Map message = json.parse(encodedMessage);</programlisting>

      <para>See <xref linkend="ch03-json" /> for more information.</para>
    </sect2>

    <sect2 id="ch05-web-sockets">
      <title>Communicating with WebSockets</title>

      <para>The custom class ChatConnection takes care of the chat client’s
      WebSocket communication. First it connects to the WebSocket by calling
      the WebSocket constructor with the argument <literal
      moreinfo="none">'ws://127.0.0.1:1337/ws'</literal>. Then ChatConnection
      adds event handlers for open, close, error, and message events. For
      example, here’s the code that responds to message events:</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>webSocket.onMessage.listen((MessageEvent e) {
  print('received message ${e.data}');
  _receivedEncodedMessage(e.data);
});</programlisting>

      <para>The <literal>_receivedEncodedMessage()</literal> method just
      parses the JSON data and displays it in the status area.</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>_receivedEncodedMessage(String encodedMessage) {
  Map message = json.parse(encodedMessage);
  if (message['f'] != null) {
    chatWindow.displayMessage(message['m'], message['f']);
  }
}</programlisting>

      <para>To send a message on the WebSocket connection,
      <literal>_sendEncodedMessage()</literal> ensures the WebSocket
      connection is ready and then sends the JSON-encoded message.</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>// In the ChatConnection class:
send(String from, String message) {
  var encoded = json.stringify({'f': from, 'm': message});
  _sendEncodedMessage(encoded);
}

_sendEncodedMessage(String encodedMessage) {
  if (webSocket != null &amp;&amp; webSocket.readyState == WebSocket.OPEN) {
    webSocket.send(encodedMessage);
  } else {
    print('WebSocket not connected, message $encodedMessage not sent');
  }
}</programlisting>

      <para>In the event of a connection problem, the client code attempts to
      reconnect to the WebSocket server. The following code takes advantage of
      Dart’s nested functions, nesting the
      <literal>scheduleReconnect()</literal> function inside of
      <literal>_init()</literal>. Dart’s lexical scoping ensures that
      <literal>scheduleReconnect()</literal> can see variables from
      <literal>_init()</literal>.</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>_init([int retrySeconds = 2]) {
  bool encounteredError = false;
  chatWindow.displayNotice('Connecting to Web socket');
  webSocket = new WebSocket(url);
  
  scheduleReconnect() {
    chatWindow.displayNotice('socket closed, retrying in $retrySeconds seconds');
    if (!encounteredError) {
      new Timer(new Duration(seconds:retrySeconds),
          () =&gt; _init(retrySeconds*2));
    }
    encounteredError = true;
  } 
  //...
  webSocket.onClose.listen((e) =&gt; scheduleReconnect());
  webSocket.onError.listen((e) =&gt; scheduleReconnect());</programlisting>

      <para>The reconnect logic uses <literal>new Timer()</literal> to
      schedule a retry using an exponential backoff algorithm.</para>
    </sect2>
  </sect1>

  <sect1 id="ch05-server">
    <title>The Server’s Code</title>

    <para>The chat-server.dart file contains most of the code used in the chat
    server. It is responsible for serving static files and managing WebSocket
    connections. The chat server also logs the chat messages to a file.</para>

    <sect2 id="ch05-server-static-files">
      <title>Serving Static Files</title>

      <para>The chat server uses dart:io’s HttpServer to implement a web
      server. The default request handler is configured to serve static files
      from a specific directory on the file system.</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>runServer(String basePath, int port) {
  ChatHandler chatHandler = new ChatHandler(basePath);
  StaticFileHandler fileHandler = new StaticFileHandler(basePath);
  
  HttpServer.bind('127.0.0.1', port)
    .then((HttpServer server) {
      print('listening for connections on $port');
      
      var sc = new StreamController();
      sc.stream.transform(new WebSocketTransformer()).listen(chatHandler.onConnection);

      server.listen((HttpRequest request) {
        if (request.uri.path == '/ws') {
          sc.add(request);
        } else {
          fileHandler.onRequest(request);
        }
      });
    },
    onError: (error) =&gt; print("Error starting HTTP server: $error"));
}</programlisting>

      <para>The StaticFileHandler first gets the file contents using File and
      Stream. It then sends those contents using the HttpResponse object from
      the request.</para>

      <para>Because I/O can cause delays, due to variable network or disk
      bandwidth conditions, the chat server uses asynchronous I/O to handle
      HTTP requests while still being responsive to other requests. Each I/O
      request returns a Future, allowing the server to continue executing
      without waiting for the I/O to complete.</para>

      <para>For example, in the following snippet the
      <literal>exists()</literal> method returns a Future. When the Future
      completes (with a value of true if the file exists, or false if it
      doesn’t), the function specified to <literal>then()</literal>
      executes.</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>// Respond to HTTP requests for static files.
onRequest(HttpRequest request) {
  final String path =
      request.uri.path == '/' ? '/index.html' : request.uri.path;
  final File file = new File('${basePath}${path}');
  file.exists().then((bool found) {
    if (found) {
      file.fullPath().then((String fullPath) {
        if (!fullPath.startsWith(basePath)) {
          _send404(request.response);
        } else {
          file.openRead().pipe(request.response)
            .catchError((e) =&gt; print(e));
        }
      });
    } else {
      _send404(request.response);
    }
  });
}</programlisting>

      <para>See <xref linkend="ch03-asynchronous-programming" /> for more
      information about using Future, and <xref
      linkend="ch03-files-and-directories" /> for details on file and
      directory I/O.</para>
    </sect2>

    <sect2 id="ch05-server-web-sockets">
      <title>Managing WebSocket Connections</title>

      <para>In addition to serving static files, the chat server manages
      WebSocket connections, routing chat messages between clients. The
      dart:io WebSocketTransformer class accepts HTTP connections, converts
      them into WebSocket connections, and then passes them to
      ChatHandler.</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>runServer(String basePath, int port) {
  //...
  var sc = new StreamController();
  sc.stream.transform(new WebSocketTransformer())
      .listen(chatHandler.onConnection);
}</programlisting>

      <para>ChatHandler is a custom class that takes care of all WebSocket
      communication for the chat server. Here is its implementation.</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>class ChatHandler {
  Set&lt;WebSocketConnection&gt; connections;
  //...
  onConnection(WebSocket conn) {
    void onMessage(message) {
      print('new ws msg: $message');
      webSocketConnections.forEach((connection) {
        if (conn != connection) {
          print('queued msg to be sent');
          queue(() =&gt; connection.send(message));
        }
      });
      time('send to isolate', () =&gt; log.log(message));
    }
    
    print('new ws conn');
    webSocketConnections.add(conn);
    conn.listen(onMessage,
      onDone: () =&gt; webSocketConnections.remove(conn),
      onError: (e) =&gt; webSocketConnections.remove(conn)
    );
  }
}</programlisting>

      <para>When a client connects, the server adds the client’s WebSocket
      connection to a collection. When the client disconnects (either through
      an error or on purpose), the server removes that client’s connection
      from the collection. When a new message arrives, the server sends the
      message to all connected clients except the original source.</para>
    </sect2>

    <sect2 id="ch05-server-log">
      <title>Logging Messages to a File</title>

      <para>The chat server logs data to a file, client/chat-log.txt, using a
      custom library implemented in file-logger.dart. This library uses an
      isolate to handle file I/O without tying up the root isolate. Here’s the
      code that creates and starts this isolate:</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>SendPort _loggingPort = spawnFunction(startLogging);</programlisting>

      <para>The value returned by dart:isolate’s
      <literal>spawnFunction()</literal> is a SendPort object. Because
      isolates share no data, messages sent to ports are the only way for the
      root isolate to communicate with the spawned isolate.</para>

      <para>The argument to <literal>spawnFunction()</literal> points to the
      <literal>startLogging()</literal> function, which implements the logging
      isolate. The logic for the logging isolate is simple: the first message
      specifies the log file location, and subsequent messages provide data to
      write to the log file.</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>startLogging() {
  print('started logger');
  File logFile;
  IOSink out;
  port.receive((msg, replyTo) {
    if (logFile == null) {
      print('Opening file $msg');
      logFile = new File(msg);
      out = logFile.openWrite(FileMode.APPEND);
    } else {
      time('write to file', () {
        out.addString('${new DateTime.now()} : $msg\n');
      });
    }
  });
}</programlisting>

      <para>In the preceding code, the port property used by
      <literal>startLogging()</literal> refers to a ReceivePort provided by
      dart:isolate. The port is how this isolate gets data from the root
      isolate. If this isolate needed to send messages back to the root
      isolate, it could use the replyTo argument (a SendPort) to do so.</para>

      <para>Recall that in the root isolate, the _loggingPort variable holds a
      SendPort that the root isolate uses to send messages to the logging
      isolate. Every time the chat server calls the <literal>log()</literal>
      method, the root isolate sends the log data:</para>

      <programlisting format="linespecific"><remark>lang-dart
</remark>void log(String message) {
  _loggingPort.send(message);
}</programlisting>

      <para>See <xref
      linkend="ch03-dartisolate---concurrency-with-isolates" /> for more
      information about using isolates.</para>
    </sect2>
  </sect1>

  <sect1 id="ch05-what-next">
    <title>What Next?</title>

    <para>You’ve seen how the Dart Chat sample uses both server-side and
    client-side Dart code to implement a web app. Here are some other samples
    you might want to look at:</para>

    <itemizedlist>
      <listitem>
        <para><ulink
        url="https://code.google.com/p/dart/source/browse/#svn%2Ftrunk%2Fdart%2Fsamples%2Fsolar">
        Solar</ulink>, which simulates the solar system with animations in a
        canvas, using <phrase><literal
        role="keep-together">requestAnimationFrame()</literal></phrase>.</para>
      </listitem>

      <listitem>
        <para><ulink
        url="https://code.google.com/p/dart/source/browse/#svn%2Ftrunk%2Fdart%2Fsamples%2Fspirodraw">
        Spirodraw</ulink>, a fun, interactive tool to build colorful works of
        art.</para>
      </listitem>
    </itemizedlist>

    <para>Finally, please visit our website and join the discussion. We look
    forward to hearing from you!</para>

    <itemizedlist role="keep-together">
      <listitem>
        <para><ulink url="http://www.dartlang.org">Dart website</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="http://www.dartlang.org/mailing-list"> Dart
        discussion group</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="http://stackoverflow.com/tags/dart"> Dart questions
        on Stack Overflow</ulink></para>
      </listitem>
    </itemizedlist>
  </sect1>
</chapter>
